@array_function_dispatch(_unary_dispatcher)
def eig(a):
    '\n    Compute the eigenvalues and right eigenvectors of a square array.\n\n    Parameters\n    ----------\n    a : (..., M, M) array\n        Matrices for which the eigenvalues and right eigenvectors will\n        be computed\n\n    Returns\n    -------\n    w : (..., M) array\n        The eigenvalues, each repeated according to its multiplicity.\n        The eigenvalues are not necessarily ordered. The resulting\n        array will be of complex type, unless the imaginary part is\n        zero in which case it will be cast to a real type. When `a`\n        is real the resulting eigenvalues will be real (0 imaginary\n        part) or occur in conjugate pairs\n\n    v : (..., M, M) array\n        The normalized (unit "length") eigenvectors, such that the\n        column ``v[:,i]`` is the eigenvector corresponding to the\n        eigenvalue ``w[i]``.\n\n    Raises\n    ------\n    LinAlgError\n        If the eigenvalue computation does not converge.\n\n    See Also\n    --------\n    eigvals : eigenvalues of a non-symmetric array.\n\n    eigh : eigenvalues and eigenvectors of a real symmetric or complex\n           Hermitian (conjugate symmetric) array.\n\n    eigvalsh : eigenvalues of a real symmetric or complex Hermitian\n               (conjugate symmetric) array.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    This is implemented using the ``_geev`` LAPACK routines which compute\n    the eigenvalues and eigenvectors of general square arrays.\n\n    The number `w` is an eigenvalue of `a` if there exists a vector\n    `v` such that ``dot(a,v) = w * v``. Thus, the arrays `a`, `w`, and\n    `v` satisfy the equations ``dot(a[:,:], v[:,i]) = w[i] * v[:,i]``\n    for :math:`i \\in \\{0,...,M-1\\}`.\n\n    The array `v` of eigenvectors may not be of maximum rank, that is, some\n    of the columns may be linearly dependent, although round-off error may\n    obscure that fact. If the eigenvalues are all different, then theoretically\n    the eigenvectors are linearly independent. Likewise, the (complex-valued)\n    matrix of eigenvectors `v` is unitary if the matrix `a` is normal, i.e.,\n    if ``dot(a, a.H) = dot(a.H, a)``, where `a.H` denotes the conjugate\n    transpose of `a`.\n\n    Finally, it is emphasized that `v` consists of the *right* (as in\n    right-hand side) eigenvectors of `a`.  A vector `y` satisfying\n    ``dot(y.T, a) = z * y.T`` for some number `z` is called a *left*\n    eigenvector of `a`, and, in general, the left and right eigenvectors\n    of a matrix are not necessarily the (perhaps conjugate) transposes\n    of each other.\n\n    References\n    ----------\n    G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando, FL,\n    Academic Press, Inc., 1980, Various pp.\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n\n    (Almost) trivial example with real e-values and e-vectors.\n\n    >>> w, v = LA.eig(np.diag((1, 2, 3)))\n    >>> w; v\n    array([1., 2., 3.])\n    array([[1., 0., 0.],\n           [0., 1., 0.],\n           [0., 0., 1.]])\n\n    Real matrix possessing complex e-values and e-vectors; note that the\n    e-values are complex conjugates of each other.\n\n    >>> w, v = LA.eig(np.array([[1, -1], [1, 1]]))\n    >>> w; v\n    array([1.+1.j, 1.-1.j])\n    array([[0.70710678+0.j        , 0.70710678-0.j        ],\n           [0.        -0.70710678j, 0.        +0.70710678j]])\n\n    Complex-valued matrix with real e-values (but complex-valued e-vectors);\n    note that ``a.conj().T == a``, i.e., `a` is Hermitian.\n\n    >>> a = np.array([[1, 1j], [-1j, 1]])\n    >>> w, v = LA.eig(a)\n    >>> w; v\n    array([2.+0.j, 0.+0.j])\n    array([[ 0.        +0.70710678j,  0.70710678+0.j        ], # may vary\n           [ 0.70710678+0.j        , -0.        +0.70710678j]])\n\n    Be careful about round-off error!\n\n    >>> a = np.array([[1 + 1e-9, 0], [0, 1 - 1e-9]])\n    >>> # Theor. e-values are 1 +/- 1e-9\n    >>> w, v = LA.eig(a)\n    >>> w; v\n    array([1., 1.])\n    array([[1., 0.],\n           [0., 1.]])\n\n    '
    (a, wrap) = _makearray(a)
    _assertRankAtLeast2(a)
    _assertNdSquareness(a)
    _assertFinite(a)
    (t, result_t) = _commonType(a)
    extobj = get_linalg_error_extobj(_raise_linalgerror_eigenvalues_nonconvergence)
    signature = ('D->DD' if isComplexType(t) else 'd->DD')
    (w, vt) = _umath_linalg.eig(a, signature=signature, extobj=extobj)
    if ((not isComplexType(t)) and all((w.imag == 0.0))):
        w = w.real
        vt = vt.real
        result_t = _realType(result_t)
    else:
        result_t = _complexType(result_t)
    vt = vt.astype(result_t, copy=False)
    return (w.astype(result_t, copy=False), wrap(vt))