@pytest.mark.filterwarnings('ignore: Default solver will be changed')
@pytest.mark.filterwarnings('ignore: Default multi_class will')
@pytest.mark.filterwarnings('ignore:The default value of n_estimators')
def test_set_params():
    'set_params should be able to set estimators'
    clf1 = LogisticRegression(random_state=123, C=1.0)
    clf2 = RandomForestClassifier(random_state=123, max_depth=None)
    clf3 = GaussianNB()
    eclf1 = VotingClassifier([('lr', clf1), ('rf', clf2)], voting='soft', weights=[1, 2])
    assert ('lr' in eclf1.named_estimators)
    assert (eclf1.named_estimators.lr is eclf1.estimators[0][1])
    assert (eclf1.named_estimators.lr is eclf1.named_estimators['lr'])
    eclf1.fit(X, y)
    assert ('lr' in eclf1.named_estimators_)
    assert (eclf1.named_estimators_.lr is eclf1.estimators_[0])
    assert (eclf1.named_estimators_.lr is eclf1.named_estimators_['lr'])
    eclf2 = VotingClassifier([('lr', clf1), ('nb', clf3)], voting='soft', weights=[1, 2])
    eclf2.set_params(nb=clf2).fit(X, y)
    assert (not hasattr(eclf2, 'nb'))
    assert_array_equal(eclf1.predict(X), eclf2.predict(X))
    assert_array_almost_equal(eclf1.predict_proba(X), eclf2.predict_proba(X))
    assert_equal(eclf2.estimators[0][1].get_params(), clf1.get_params())
    assert_equal(eclf2.estimators[1][1].get_params(), clf2.get_params())
    eclf1.set_params(lr__C=10.0)
    eclf2.set_params(nb__max_depth=5)
    assert (eclf1.estimators[0][1].get_params()['C'] == 10.0)
    assert (eclf2.estimators[1][1].get_params()['max_depth'] == 5)
    assert_equal(eclf1.get_params()['lr__C'], eclf1.get_params()['lr'].get_params()['C'])