def index_to_string_table_from_tensor(mapping, default_value='UNK', name=None):
    'Returns a lookup table that maps a `Tensor` of indices into strings.\n\n  This operation constructs a lookup table to map int64 indices into string\n  values. The mapping is initialized from a string `mapping` 1-D `Tensor` where\n  each element is a value and the corresponding index within the tensor is the\n  key.\n\n  Any input which does not have a corresponding index in \'mapping\'\n  (an out-of-vocabulary entry) is assigned the `default_value`\n\n  The underlying table must be initialized by calling\n  `tf.tables_initializer.run()` or `table.init.run()` once.\n\n  Elements in `mapping` cannot have duplicates, otherwise when executing the\n  table initializer op, it will throw a `FailedPreconditionError`.\n\n  Sample Usages:\n\n  ```python\n  mapping_string = t.constant(["emerson", "lake", "palmer")\n  indices = tf.constant([1, 5], tf.int64)\n  table = tf.contrib.lookup.index_to_string_table_from_tensor(\n      mapping_string, default_value="UNKNOWN")\n  values = table.lookup(indices)\n  ...\n  tf.tables_initializer().run()\n\n  values.eval() ==> ["lake", "UNKNOWN"]\n  ```\n\n  Args:\n    mapping: A 1-D string `Tensor` that specifies the strings to map from\n      indices.\n    default_value: The value to use for out-of-vocabulary indices.\n    name: A name for this op (optional).\n\n  Returns:\n    The lookup table to map a string values associated to a given index `int64`\n    `Tensors`.\n\n  Raises:\n    ValueError: when `mapping` is not set.\n  '
    if (mapping is None):
        raise ValueError('mapping must be specified.')
    return lookup_ops.index_to_string_table_from_tensor(vocabulary_list=mapping, default_value=default_value, name=name)