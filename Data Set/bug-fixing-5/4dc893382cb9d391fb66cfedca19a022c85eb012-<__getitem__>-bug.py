def __getitem__(self, key):
    "x.__getitem__(i) <=> x[i]\n        Returns a sliced view of this array if the elements fetched are contiguous in memory;\n        otherwise, returns a newly created NDArray.\n        This functions supports advanced indexing defined in the following reference with\n        some limitations.\n        https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.indexing.html#combining-advanced-and-basic-indexing\n        The following features/functionality are not supported for now:\n        1. If key is a list type, only a list of integers is supported,\n           i.e. key=[1, 2] is okay, while not for key=[[1]].\n        2. Ellipsis (...) and np.newaxis are not supported.\n        3. Boolean array indexing.\n\n        Parameters\n        ----------\n        key : int or slice, or array like\n            Indexing key.\n\n        Examples\n        --------\n        >>> x = mx.nd.arange(0,6).reshape((2,3))\n        >>> x.asnumpy()\n        array([[ 0.,  1.,  2.],\n               [ 3.,  4.,  5.]], dtype=float32)\n        >>> x[1].asnumpy()\n        array([ 3.,  4.,  5.], dtype=float32)\n        >>> y = x[0:1]\n        >>> y[:] = 2\n        >>> x.asnumpy()\n        array([[ 2.,  2.,  2.],\n               [ 3.,  4.,  5.]], dtype=float32)\n        >>> x = mx.nd.arange(0, 8, dtype='int32').reshape((2, 2, 2))\n        >>> x[[0, 1]]\n        [[[0 1]\n          [2 3]]\n         [[4 5]\n          [6 7]]]\n        >>> x[1:, [0, 1]]\n        [[[4 5]\n          [6 7]]]\n        >>> y = np.array([0, 1], dtype='int32')\n        >>> x[1:, y]\n        [[[4 5]\n          [6 7]]]\n        >>> y = mx.nd.array([0, 1], dtype='int32')\n        >>> x[1:, y]\n        [[[4 5]\n          [6 7]]]\n        "
    indexing_dispatch_code = _get_indexing_dispatch_code(key)
    if (indexing_dispatch_code == _NDARRAY_BASIC_INDEXING):
        return self._get_nd_basic_indexing(key)
    elif (indexing_dispatch_code == _NDARRAY_ADVANCED_INDEXING):
        return self._get_nd_advanced_indexing(key)
    else:
        raise ValueError(('Indexing NDArray with index=%s and type=%s is not supported' % (str(key), str(type(key)))))