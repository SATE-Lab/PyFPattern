def test_la_roots():
    rootf = (lambda a: (lambda n, mu: orth.la_roots(n, a, mu)))
    evalf = (lambda a: (lambda n, x: orth.eval_genlaguerre(n, a, x)))
    weightf = (lambda a: (lambda x: ((x ** a) * np.exp((- x)))))
    vgq = verify_gauss_quad
    vgq(rootf((- 0.5)), evalf((- 0.5)), weightf((- 0.5)), 0.0, np.inf, 5)
    vgq(rootf((- 0.5)), evalf((- 0.5)), weightf((- 0.5)), 0.0, np.inf, 25, atol=1e-13)
    vgq(rootf((- 0.5)), evalf((- 0.5)), weightf((- 0.5)), 0.0, np.inf, 100, atol=1e-12)
    vgq(rootf(0.1), evalf(0.1), weightf(0.1), 0.0, np.inf, 5)
    vgq(rootf(0.1), evalf(0.1), weightf(0.1), 0.0, np.inf, 25, atol=1e-13)
    vgq(rootf(0.1), evalf(0.1), weightf(0.1), 0.0, np.inf, 100, atol=1e-13)
    vgq(rootf(1), evalf(1), weightf(1), 0.0, np.inf, 5)
    vgq(rootf(1), evalf(1), weightf(1), 0.0, np.inf, 25, atol=1e-13)
    vgq(rootf(1), evalf(1), weightf(1), 0.0, np.inf, 100, atol=1e-13)
    vgq(rootf(10), evalf(10), weightf(10), 0.0, np.inf, 5)
    vgq(rootf(10), evalf(10), weightf(10), 0.0, np.inf, 25, atol=1e-13)
    vgq(rootf(10), evalf(10), weightf(10), 0.0, np.inf, 100, atol=1e-12)
    vgq(rootf(50), evalf(50), weightf(50), 0.0, np.inf, 5)
    vgq(rootf(50), evalf(50), weightf(50), 0.0, np.inf, 25, atol=1e-13)
    vgq(rootf(50), evalf(50), weightf(50), 0.0, np.inf, 100, rtol=1e-14, atol=1e-13)
    (x, w) = orth.la_roots(5, 2, False)
    (y, v, m) = orth.la_roots(5, 2, True)
    assert_allclose(x, y, 1e-14, 1e-14)
    assert_allclose(w, v, 1e-14, 1e-14)
    (muI, muI_err) = integrate.quad(weightf(2.0), 0.0, np.inf)
    assert_allclose(m, muI, rtol=muI_err)
    assert_raises(ValueError, orth.la_roots, 0, 2)
    assert_raises(ValueError, orth.la_roots, 3.3, 2)
    assert_raises(ValueError, orth.la_roots, 3, (- 1.1))