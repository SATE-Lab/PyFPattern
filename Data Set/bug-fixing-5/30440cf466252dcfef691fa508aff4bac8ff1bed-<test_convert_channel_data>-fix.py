def test_convert_channel_data(self) -> None:
    user_handler = UserHandler()
    subscriber_handler = SubscriberHandler()
    stream_id_mapper = IdMapper()
    user_id_mapper = IdMapper()
    team_name = 'gryffindor'
    convert_user_data(user_handler=user_handler, user_id_mapper=user_id_mapper, user_data_map=self.username_to_user, realm_id=3, team_name=team_name)
    zerver_stream = convert_channel_data(channel_data=self.mattermost_data['channel'], user_data_map=self.username_to_user, subscriber_handler=subscriber_handler, stream_id_mapper=stream_id_mapper, user_id_mapper=user_id_mapper, realm_id=3, team_name=team_name)
    self.assertEqual(len(zerver_stream), 3)
    self.assertEqual(zerver_stream[0]['name'], 'Gryffindor common room')
    self.assertEqual(zerver_stream[0]['invite_only'], False)
    self.assertEqual(zerver_stream[0]['description'], 'A place for talking about Gryffindor common room')
    self.assertEqual(zerver_stream[0]['rendered_description'], '')
    self.assertEqual(zerver_stream[0]['realm'], 3)
    self.assertEqual(zerver_stream[1]['name'], 'Gryffindor quidditch team')
    self.assertEqual(zerver_stream[1]['invite_only'], False)
    self.assertEqual(zerver_stream[1]['description'], 'A place for talking about Gryffindor quidditch team')
    self.assertEqual(zerver_stream[1]['rendered_description'], '')
    self.assertEqual(zerver_stream[1]['realm'], 3)
    self.assertEqual(zerver_stream[2]['name'], 'Dumbledores army')
    self.assertEqual(zerver_stream[2]['invite_only'], True)
    self.assertEqual(zerver_stream[2]['description'], 'A place for talking about Dumbledores army')
    self.assertEqual(zerver_stream[2]['rendered_description'], '')
    self.assertEqual(zerver_stream[2]['realm'], 3)
    self.assertTrue(stream_id_mapper.has('gryffindor-common-room'))
    self.assertTrue(stream_id_mapper.has('gryffindor-quidditch-team'))
    self.assertTrue(stream_id_mapper.has('dumbledores-army'))
    ron_id = user_id_mapper.get('ron')
    harry_id = user_id_mapper.get('harry')
    self.assertEqual({ron_id, harry_id}, {1, 2})
    self.assertEqual(subscriber_handler.get_users(stream_id_mapper.get('gryffindor-common-room')), {ron_id, harry_id})
    self.assertEqual(subscriber_handler.get_users(stream_id_mapper.get('gryffindor-quidditch-team')), {ron_id, harry_id})
    self.assertEqual(subscriber_handler.get_users(stream_id_mapper.get('dumbledores-army')), {ron_id, harry_id})
    self.username_to_user['ron'].update({
        'teams': None,
    })
    zerver_stream = convert_channel_data(channel_data=self.mattermost_data['channel'], user_data_map=self.username_to_user, subscriber_handler=subscriber_handler, stream_id_mapper=stream_id_mapper, user_id_mapper=user_id_mapper, realm_id=3, team_name=team_name)
    harry_id = user_id_mapper.get('harry')
    self.assertIn(harry_id, {1, 2})
    self.assertEqual(subscriber_handler.get_users(stream_id_mapper.get('gryffindor-common-room')), {harry_id})
    self.assertEqual(subscriber_handler.get_users(stream_id_mapper.get('gryffindor-quidditch-team')), {harry_id})
    self.assertEqual(subscriber_handler.get_users(stream_id_mapper.get('dumbledores-army')), {harry_id})
    team_name = 'slytherin'
    zerver_stream = convert_channel_data(channel_data=self.mattermost_data['channel'], user_data_map=self.username_to_user, subscriber_handler=subscriber_handler, stream_id_mapper=stream_id_mapper, user_id_mapper=user_id_mapper, realm_id=4, team_name=team_name)
    malfoy_id = user_id_mapper.get('malfoy')
    pansy_id = user_id_mapper.get('pansy')
    snape_id = user_id_mapper.get('snape')
    self.assertEqual({malfoy_id, pansy_id, snape_id}, {3, 4, 5})
    self.assertEqual(subscriber_handler.get_users(stream_id_mapper.get('slytherin-common-room')), {malfoy_id, pansy_id, snape_id})
    self.assertEqual(subscriber_handler.get_users(stream_id_mapper.get('slytherin-quidditch-team')), {malfoy_id, pansy_id})