def regionprops_table(label_image, intensity_image=None, cache=True, properties=('label', 'bbox'), separator='-'):
    'Find image properties and convert them into a dictionary\n\n    Parameters\n    ----------\n    label_image : (N, M) ndarray\n        Labeled input image. Labels with value 0 are ignored.\n    intensity_image : (N, M) ndarray, optional\n        Intensity (i.e., input) image with same size as labeled image.\n        Default is None.\n    cache : bool, optional\n        Determine whether to cache calculated properties. The computation is\n        much faster for cached properties, whereas the memory consumption\n        increases.\n    properties : tuple or list of str, optional\n        Properties that will be included in the resulting dictionary\n        For a list of available properties, please see :func:`regionprops`.\n        Users should remember to add "label" to keep track of region\n        identities.\n    separator : str, optional\n        For non-scalar properties not listed in OBJECT_COLUMNS, each element\n        will appear in its own column, with the index of that element separated\n        from the property name by this separator. For example, the inertia\n        tensor of a 2D region will appear in four columns:\n        ``inertia_tensor-0-0``, ``inertia_tensor-0-1``, ``inertia_tensor-1-0``,\n        and ``inertia_tensor-1-1`` (where the separator is ``-``).\n\n        Object columns are those that cannot be split in this way because the\n        number of columns would change depending on the object. For example,\n        ``image`` and ``coords``.\n\n    Returns\n    -------\n    out_dict : dict\n        Dictionary mapping property names to an array of values of that\n        property, one value per region. This dictionary can be used as input to\n        pandas ``DataFrame`` to map property names to columns in the frame and\n        regions to rows.\n\n    Notes\n    -----\n    Each column contains either a scalar property, an object property, or an\n    element in a multidimensional array.\n\n    Properties with scalar values for each region, such as "eccentricity", will\n    appear as a float or int array with that property name as key.\n\n    Multidimensional properties *of fixed size* for a given image dimension,\n    such as "centroid" (every centroid will have three elements in a 3D image,\n    no matter the region size), will be split into that many columns, with the\n    name {property_name}{separator}{element_num} (for 1D properties),\n    {property_name}{separator}{elem_num0}{separator}{elem_num1} (for 2D\n    properties), and so on.\n\n    For multidimensional properties that don\'t have a fixed size, such as\n    "image" (the image of a region varies in size depending on the region\n    size), an object array will be used, with the corresponding property name\n    as the key.\n\n    Examples\n    --------\n    >>> from skimage import data, util, measure\n    >>> image = data.coins()\n    >>> label_image = measure.label(image > 110, connectivity=image.ndim)\n    >>> props = regionprops_table(label_image, image,\n    ...                           properties=[\'label\', \'inertia_tensor\',\n    ...                                       \'inertia_tensor_eigvals\'])\n    >>> props  # doctest: +ELLIPSIS +SKIP\n    {\'label\': array([ 1,  2, ...]), ...\n     \'inertia_tensor-0-0\': array([  4.012...e+03,   8.51..., ...]), ...\n     ...,\n     \'inertia_tensor_eigvals-1\': array([  2.67...e+02,   2.83..., ...])}\n\n    The resulting dictionary can be directly passed to pandas, if installed, to\n    obtain a clean DataFrame:\n\n    >>> import pandas as pd  # doctest: +SKIP\n    >>> data = pd.DataFrame(props)  # doctest: +SKIP\n    >>> data.head()  # doctest: +SKIP\n       label  inertia_tensor-0-0  ...  inertia_tensor_eigvals-1\n    0      1         4012.909888  ...                267.065503\n    1      2            8.514739  ...                  2.834806\n    2      3            0.666667  ...                  0.000000\n    3      4            0.000000  ...                  0.000000\n    4      5            0.222222  ...                  0.111111\n\n    [5 rows x 7 columns]\n\n    '
    regions = regionprops(label_image, intensity_image=intensity_image, cache=cache)
    return _props_to_dict(regions, properties=properties, separator=separator)