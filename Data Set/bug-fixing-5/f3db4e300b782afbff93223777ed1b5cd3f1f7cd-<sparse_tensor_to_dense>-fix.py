@tf_export('sparse.to_dense', v1=['sparse.to_dense', 'sparse_tensor_to_dense'])
@deprecation.deprecated_endpoints('sparse_tensor_to_dense')
def sparse_tensor_to_dense(sp_input, default_value=0, validate_indices=True, name=None):
    'Converts a `SparseTensor` into a dense tensor.\n\n  This op is a convenience wrapper around `sparse_to_dense` for `SparseTensor`s.\n\n  For example, if `sp_input` has shape `[3, 5]` and non-empty string values:\n\n      [0, 1]: a\n      [0, 3]: b\n      [2, 0]: c\n\n  and `default_value` is `x`, then the output will be a dense `[3, 5]`\n  string tensor with values:\n\n      [[x a x b x]\n       [x x x x x]\n       [c x x x x]]\n\n  Indices must be without repeats.  This is only\n  tested if validate_indices is True.\n\n  Args:\n    sp_input: The input `SparseTensor`.\n    default_value: Scalar value to set for indices not specified in\n      `sp_input`.  Defaults to zero.\n    validate_indices: A boolean value.  If `True`, indices are checked to make\n      sure they are sorted in lexicographic order and that there are no repeats.\n    name: A name prefix for the returned tensors (optional).\n\n  Returns:\n    A dense tensor with shape `sp_input.dense_shape` and values specified by\n    the non-empty values in `sp_input`. Indices not in `sp_input` are assigned\n    `default_value`.\n\n  Raises:\n    TypeError: If `sp_input` is not a `SparseTensor`.\n  '
    sp_input = _convert_to_sparse_tensor(sp_input)
    return gen_sparse_ops.sparse_to_dense(sp_input.indices, sp_input.dense_shape, sp_input.values, default_value=default_value, validate_indices=validate_indices, name=name)