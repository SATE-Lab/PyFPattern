def get_cifar100(withlabel=True, ndim=3, scale=1.0):
    'Gets the CIFAR-100 dataset.\n\n    `CIFAR-100 <https://www.cs.toronto.edu/~kriz/cifar.html>`_ is a set of\n    small natural images. Each example is an RGB color image of size 32x32,\n    classified into 100 groups. In the original images, each component\n    pixels is represented by one-byte unsigned integer. This function scales\n    the components to floating point values in the interval ``[0, scale]``.\n\n    This function returns the training set and the test set of the official\n    CIFAR-100 dataset. If ``withlabel`` is ``True``, each dataset consists of\n    tuples of images and labels, otherwise it only consists of images.\n\n    Args:\n        withlabel (bool): If ``True``, it returns datasets with labels. In this\n            case, each example is a tuple of an image and a label. Otherwise,\n            the datasets only contain images.\n        ndim (int): Number of dimensions of each image. The shape of each image\n            is determined depending on ndim as follows:\n\n            - ``ndim == 1``: the shape is ``(3072,)``\n            - ``ndim == 3``: the shape is ``(3, 32, 32)``\n\n        scale (float): Pixel value scale. If it is 1 (default), pixels are\n            scaled to the interval ``[0, 1]``.\n\n    Returns:\n        A tuple of two datasets. If ``withlabel`` is ``True``, both\n        are :class:`~chainer.datasets.TupleDataset` instances. Otherwise, both\n        datasets are arrays of images.\n\n    '
    raw = _retrieve_cifar_100()
    train = _preprocess_cifar(raw['train_x'], raw['train_y'], withlabel, ndim, scale)
    test = _preprocess_cifar(raw['test_x'], raw['test_y'], withlabel, ndim, scale)
    return (train, test)