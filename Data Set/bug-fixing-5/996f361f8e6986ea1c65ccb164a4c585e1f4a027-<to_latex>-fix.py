def to_latex(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, bold_rows=False, column_format=None, longtable=None, escape=None, encoding=None, decimal='.', multicolumn=None, multicolumn_format=None, multirow=None):
    "\n        Render an object to a LaTeX tabular environment table.\n\n        Render an object to a tabular environment table. You can splice\n        this into a LaTeX document. Requires \\usepackage{booktabs}.\n\n        .. versionchanged:: 0.20.2\n           Added to Series\n\n        Parameters\n        ----------\n        buf : file descriptor or None\n            Buffer to write to. If None, the output is returned as a string.\n        columns : list of label, optional\n            The subset of columns to write. Writes all columns by default.\n        col_space : int, optional\n            The minimum width of each column.\n        header : bool or list of str, default True\n            Write out the column names. If a list of strings is given,\n            it is assumed to be aliases for the column names.\n        index : bool, default True\n            Write row names (index).\n        na_rep : str, default 'NaN'\n            Missing data representation.\n        formatters : list of functions or dict of {str: function}, optional\n            Formatter functions to apply to columns' elements by position or\n            name. The result of each function must be a unicode string.\n            List must be of length equal to the number of columns.\n        float_format : str, optional\n            Format string for floating point numbers.\n        sparsify : bool, optional\n            Set to False for a DataFrame with a hierarchical index to print\n            every multiindex key at each row. By default, the value will be\n            read from the config module.\n        index_names : bool, default True\n            Prints the names of the indexes.\n        bold_rows : bool, default False\n            Make the row labels bold in the output.\n        column_format : str, optional\n            The columns format as specified in `LaTeX table format\n            <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n            columns. By default, 'l' will be used for all columns except\n            columns of numbers, which default to 'r'.\n        longtable : bool, optional\n            By default, the value will be read from the pandas config\n            module. Use a longtable environment instead of tabular. Requires\n            adding a \\usepackage{longtable} to your LaTeX preamble.\n        escape : bool, optional\n            By default, the value will be read from the pandas config\n            module. When set to False prevents from escaping latex special\n            characters in column names.\n        encoding : str, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        decimal : str, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe.\n            .. versionadded:: 0.18.0\n        multicolumn : bool, default True\n            Use \\multicolumn to enhance MultiIndex columns.\n            The default will be read from the config module.\n            .. versionadded:: 0.20.0\n        multicolumn_format : str, default 'l'\n            The alignment for multicolumns, similar to `column_format`\n            The default will be read from the config module.\n            .. versionadded:: 0.20.0\n        multirow : bool, default False\n            Use \\multirow to enhance MultiIndex rows. Requires adding a\n            \\usepackage{multirow} to your LaTeX preamble. Will print\n            centered labels (instead of top-aligned) across the contained\n            rows, separating groups via clines. The default will be read\n            from the pandas config module.\n            .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        str or None\n            If buf is None, returns the resulting LateX format as a\n            string. Otherwise returns None.\n\n        See Also\n        --------\n        DataFrame.to_string : Render a DataFrame to a console-friendly\n            tabular output.\n        DataFrame.to_html : Render a DataFrame as an HTML table.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n        ...                    'mask': ['red', 'purple'],\n        ...                    'weapon': ['sai', 'bo staff']})\n        >>> df.to_latex(index=False) # doctest: +NORMALIZE_WHITESPACE\n        '\\\\begin{tabular}{lll}\\n\\\\toprule\\n      name &    mask &    weapon\n        \\\\\\\\\\n\\\\midrule\\n   Raphael &     red &       sai \\\\\\\\\\n Donatello &\n         purple &  bo staff \\\\\\\\\\n\\\\bottomrule\\n\\\\end{tabular}\\n'\n        "
    if (self.ndim == 1):
        self = self.to_frame()
    if (longtable is None):
        longtable = config.get_option('display.latex.longtable')
    if (escape is None):
        escape = config.get_option('display.latex.escape')
    if (multicolumn is None):
        multicolumn = config.get_option('display.latex.multicolumn')
    if (multicolumn_format is None):
        multicolumn_format = config.get_option('display.latex.multicolumn_format')
    if (multirow is None):
        multirow = config.get_option('display.latex.multirow')
    formatter = DataFrameFormatter(self, buf=buf, columns=columns, col_space=col_space, na_rep=na_rep, header=header, index=index, formatters=formatters, float_format=float_format, bold_rows=bold_rows, sparsify=sparsify, index_names=index_names, escape=escape, decimal=decimal)
    formatter.to_latex(column_format=column_format, longtable=longtable, encoding=encoding, multicolumn=multicolumn, multicolumn_format=multicolumn_format, multirow=multirow)
    if (buf is None):
        return formatter.buf.getvalue()