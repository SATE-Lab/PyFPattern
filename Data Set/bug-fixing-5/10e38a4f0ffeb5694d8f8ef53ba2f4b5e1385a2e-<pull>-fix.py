def pull(self, key, out=None, priority=0):
    ' Pulls a single value or a sequence of values from the store.\n\n        This function returns immediately after adding an operator to the engine.\n        Subsequent attempts to read from the `out` variable will be blocked until the\n        pull operation completes.\n\n        `pull` is executed asynchronously after all previous `push` and `pull` calls\n        for the same input key(s) are finished.\n\n        The returned values are gauranteed to be the latest values in the store.\n\n        Parameters\n        ----------\n        key : int or list of int\n            Keys.\n\n        out: NDArray or list of NDArray or list of list of NDArray\n            Values corresponding to the keys.\n\n        priority : int, optional\n            The priority of the pull operation.\n            Higher priority pull operations are likely to be executed before\n            other pull actions.\n\n        Examples\n        --------\n        >>> # pull a single key-value pair\n        >>> a = mx.nd.zeros(shape)\n        >>> kv.pull(3, out=a)\n        >>> print a.asnumpy()\n        [[ 2.  2.  2.]\n        [ 2.  2.  2.]]\n\n        >>> # pull into multiple devices\n        >>> b = [mx.nd.ones(shape, gpu) for gpu in gpus]\n        >>> kv.pull(3, out=b)\n        >>> print b[1].asnumpy()\n        [[ 2.  2.  2.]\n        [ 2.  2.  2.]]\n\n        >>> # pull a list of key-value pairs.\n        >>> # On single device\n        >>> keys = [5, 7, 9]\n        >>> b = [mx.nd.zeros(shape)]*len(keys)\n        >>> kv.pull(keys, out=b)\n        >>> print b[1].asnumpy()\n        [[ 2.  2.  2.]\n        [ 2.  2.  2.]]\n        >>> # On multiple devices\n        >>> b = [[mx.nd.ones(shape, gpu) for gpu in gpus]] * len(keys)\n        >>> kv.pull(keys, out=b)\n        >>> print b[1][1].asnumpy()\n        [[ 2.  2.  2.]\n        [ 2.  2.  2.]]\n        '
    assert (out is not None)
    (ckeys, cvals) = _ctype_key_value(key, out)
    check_call(_LIB.MXKVStorePull(self.handle, mx_uint(len(ckeys)), ckeys, cvals, ctypes.c_int(priority)))