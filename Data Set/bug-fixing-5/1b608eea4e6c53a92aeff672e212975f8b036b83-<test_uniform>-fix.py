def test_uniform(self):
    low = Variable(torch.zeros(5, 5), requires_grad=True)
    high = Variable((torch.ones(5, 5) * 3), requires_grad=True)
    low_1d = Variable(torch.zeros(1), requires_grad=True)
    high_1d = Variable((torch.ones(1) * 3), requires_grad=True)
    self.assertEqual(Uniform(low, high).sample().size(), (5, 5))
    self.assertEqual(Uniform(low, high).sample_n(7).size(), (7, 5, 5))
    self.assertEqual(Uniform(low_1d, high_1d).sample().size(), (1,))
    self.assertEqual(Uniform(low_1d, high_1d).sample_n(1).size(), (1, 1))
    self.assertEqual(Uniform(0.0, 1.0).sample_n(1).size(), (1,))
    uniform = Uniform(low_1d, high_1d)
    above_high = Variable(torch.Tensor([4.0]))
    below_low = Variable(torch.Tensor([(- 1.0)]))
    self.assertEqual(uniform.log_prob(above_high).data[0], (- float('inf')), allow_inf=True)
    self.assertEqual(uniform.log_prob(below_low).data[0], (- float('inf')), allow_inf=True)
    self._set_rng_seed(1)
    self._gradcheck_log_prob(Uniform, (low, high))
    self._gradcheck_log_prob(Uniform, (low, 1.0))
    self._gradcheck_log_prob(Uniform, (0.0, high))
    state = torch.get_rng_state()
    rand = low.new(low.size()).uniform_()
    torch.set_rng_state(state)
    u = Uniform(low, high).rsample()
    u.backward(torch.ones_like(u))
    self.assertEqual(low.grad, (1 - rand))
    self.assertEqual(high.grad, rand)
    low.grad.zero_()
    high.grad.zero_()