def generate_config_py(target):
    "Generate config.py file containing system_info information\n    used during building the package.\n\n    Usage:\n        config['py_modules'].append((packagename, '__config__',generate_config_py))\n    "
    from numpy.distutils.system_info import system_info
    from distutils.dir_util import mkpath
    mkpath(os.path.dirname(target))
    with open(target, 'w') as f:
        f.write(("# This file is generated by numpy's %s\n" % os.path.basename(sys.argv[0])))
        f.write('# It contains system_info results at the time of building this package.\n')
        f.write('__all__ = ["get_info","show"]\n\n')
        f.write(textwrap.dedent("\n            import os\n            import sys\n\n            extra_dll_dir = os.path.join(os.path.dirname(__file__), '.libs')\n\n            if sys.platform == 'win32' and os.path.isdir(extra_dll_dir):\n                if sys.version_info >= (3, 8):\n                    os.add_dll_directory(extra_dll_dir)\n                else:\n                    os.environ.setdefault('PATH', '')\n                    os.environ['PATH'] += os.pathsep + extra_dll_dir\n\n            "))
        for (k, i) in system_info.saved_results.items():
            f.write(('%s=%r\n' % (k, i)))
        f.write(textwrap.dedent('\n            def get_info(name):\n                g = globals()\n                return g.get(name, g.get(name + "_info", {}))\n\n            def show():\n                for name,info_dict in globals().items():\n                    if name[0] == "_" or type(info_dict) is not type({}): continue\n                    print(name + ":")\n                    if not info_dict:\n                        print("  NOT AVAILABLE")\n                    for k,v in info_dict.items():\n                        v = str(v)\n                        if k == "sources" and len(v) > 200:\n                            v = v[:60] + " ...\\n... " + v[-60:]\n                        print("    %s = %s" % (k,v))\n                    '))
    return target