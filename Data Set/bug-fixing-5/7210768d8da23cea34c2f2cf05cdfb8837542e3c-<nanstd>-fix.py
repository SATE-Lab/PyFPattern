def nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue):
    '\n    Compute the standard deviation along the specified axis, while\n    ignoring NaNs.\n\n    Returns the standard deviation, a measure of the spread of a\n    distribution, of the non-NaN array elements. The standard deviation is\n    computed for the flattened array by default, otherwise over the\n    specified axis.\n\n    For all-NaN slices or slices with zero degrees of freedom, NaN is\n    returned and a `RuntimeWarning` is raised.\n\n    .. versionadded:: 1.8.0\n\n    Parameters\n    ----------\n    a : array_like\n        Calculate the standard deviation of the non-NaN values.\n    axis : {int, tuple of int, None}, optional\n        Axis or axes along which the standard deviation is computed. The default is\n        to compute the standard deviation of the flattened array.\n    dtype : dtype, optional\n        Type to use in computing the standard deviation. For arrays of\n        integer type the default is float64, for arrays of float types it\n        is the same as the array type.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must have\n        the same shape as the expected output but the type (of the\n        calculated values) will be cast if necessary.\n    ddof : int, optional\n        Means Delta Degrees of Freedom.  The divisor used in calculations\n        is ``N - ddof``, where ``N`` represents the number of non-NaN\n        elements.  By default `ddof` is zero.\n\n    keepdims : bool, optional\n        If this is set to True, the axes which are reduced are left\n        in the result as dimensions with size one. With this option,\n        the result will broadcast correctly against the original `a`.\n\n        If this value is anything but the default it is passed through\n        as-is to the relevant functions of the sub-classes.  If these\n        functions do not have a `keepdims` kwarg, a RuntimeError will\n        be raised.\n\n    Returns\n    -------\n    standard_deviation : ndarray, see dtype parameter above.\n        If `out` is None, return a new array containing the standard\n        deviation, otherwise return a reference to the output array. If\n        ddof is >= the number of non-NaN elements in a slice or the slice\n        contains only NaNs, then the result for that slice is NaN.\n\n    See Also\n    --------\n    var, mean, std\n    nanvar, nanmean\n    numpy.doc.ufuncs : Section "Output arguments"\n\n    Notes\n    -----\n    The standard deviation is the square root of the average of the squared\n    deviations from the mean: ``std = sqrt(mean(abs(x - x.mean())**2))``.\n\n    The average squared deviation is normally calculated as\n    ``x.sum() / N``, where ``N = len(x)``.  If, however, `ddof` is\n    specified, the divisor ``N - ddof`` is used instead. In standard\n    statistical practice, ``ddof=1`` provides an unbiased estimator of the\n    variance of the infinite population. ``ddof=0`` provides a maximum\n    likelihood estimate of the variance for normally distributed variables.\n    The standard deviation computed in this function is the square root of\n    the estimated variance, so even with ``ddof=1``, it will not be an\n    unbiased estimate of the standard deviation per se.\n\n    Note that, for complex numbers, `std` takes the absolute value before\n    squaring, so that the result is always real and nonnegative.\n\n    For floating-point input, the *std* is computed using the same\n    precision the input has. Depending on the input data, this can cause\n    the results to be inaccurate, especially for float32 (see example\n    below).  Specifying a higher-accuracy accumulator using the `dtype`\n    keyword can alleviate this issue.\n\n    Examples\n    --------\n    >>> a = np.array([[1, np.nan], [3, 4]])\n    >>> np.nanstd(a)\n    1.247219128924647\n    >>> np.nanstd(a, axis=0)\n    array([ 1.,  0.])\n    >>> np.nanstd(a, axis=1)\n    array([ 0.,  0.5])\n\n    '
    var = nanvar(a, axis=axis, dtype=dtype, out=out, ddof=ddof, keepdims=keepdims)
    if isinstance(var, np.ndarray):
        std = np.sqrt(var, out=var)
    else:
        std = var.dtype.type(np.sqrt(var))
    return std