def as_default(self):
    "Returns a context manager that makes this object the default session.\n\n    Use with the `with` keyword to specify that calls to\n    [`Operation.run()`](../../api_docs/python/framework.md#Operation.run) or\n    [`Tensor.eval()`](../../api_docs/python/framework.md#Tensor.eval) should be\n    executed in this session.\n\n    ```python\n    c = tf.constant(..)\n    sess = tf.Session()\n\n    with sess.as_default():\n      assert tf.get_default_session() is sess\n      print(c.eval())\n    ```\n\n    To get the current default session, use\n    [`tf.get_default_session()`](#get_default_session).\n\n\n    *N.B.* The `as_default` context manager *does not* close the\n    session when you exit the context, and you must close the session\n    explicitly.\n\n    ```python\n    c = tf.constant(...)\n    sess = tf.Session()\n    with sess.as_default():\n      print(c.eval())\n    # ...\n    with sess.as_default():\n      print(c.eval())\n\n    sess.close()\n    ```\n\n    Alternatively, you can use `with tf.Session():` to create a\n    session that is automatically closed on exiting the context,\n    including when an uncaught exception is raised.\n\n    *N.B.* The default graph is a property of the current thread. If you\n    create a new thread, and wish to use the default session in that\n    thread, you must explicitly add a `with sess.as_default():` in that\n    thread's function.\n\n    Returns:\n      A context manager using this session as the default session.\n\n    "
    return ops.default_session(self)