def to_csv(self, path_or_buf=None, sep=',', na_rep='', float_format=None, columns=None, header=True, index=True, index_label=None, mode='w', encoding=None, compression='infer', quoting=None, quotechar='"', line_terminator='\n', chunksize=None, tupleize_cols=None, date_format=None, doublequote=True, escapechar=None, decimal='.'):
    'Write object to a comma-separated values (csv) file\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, default None\n            File path or object, if None is provided the result is returned as\n            a string.\n            .. versionchanged:: 0.24.0\n                Was previously named "path" for Series.\n        sep : character, default \',\'\n            Field delimiter for the output file.\n        na_rep : string, default \'\'\n            Missing data representation\n        float_format : string, default None\n            Format string for floating point numbers\n        columns : sequence, optional\n            Columns to write\n        header : boolean or list of string, default True\n            Write out the column names. If a list of strings is given it is\n            assumed to be aliases for the column names\n            .. versionchanged:: 0.24.0\n                Previously defaulted to False for Series.\n        index : boolean, default True\n            Write row names (index)\n        index_label : string or sequence, or False, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the object uses MultiIndex.  If\n            False do not print fields for index names. Use index_label=False\n            for easier importing in R\n        mode : str\n            Python write mode, default \'w\'\n        encoding : string, optional\n            A string representing the encoding to use in the output file,\n            defaults to \'ascii\' on Python 2 and \'utf-8\' on Python 3.\n        compression : {\'infer\', \'gzip\', \'bz2\', \'zip\', \'xz\', None},\n                      default \'infer\'\n            If \'infer\' and `path_or_buf` is path-like, then detect compression\n            from the following extensions: \'.gz\', \'.bz2\', \'.zip\' or \'.xz\'\n            (otherwise no compression).\n\n            .. versionchanged:: 0.24.0\n               \'infer\' option added and set to default\n        line_terminator : string, default ``\'\\n\'``\n            The newline character or character sequence to use in the output\n            file\n        quoting : optional constant from csv module\n            defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n            then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n            will treat them as non-numeric\n        quotechar : string (length 1), default \'\\"\'\n            character used to quote fields\n        doublequote : boolean, default True\n            Control quoting of `quotechar` inside a field\n        escapechar : string (length 1), default None\n            character used to escape `sep` and `quotechar` when appropriate\n        chunksize : int or None\n            rows to write at a time\n        tupleize_cols : boolean, default False\n            .. deprecated:: 0.21.0\n               This argument will be removed and will always write each row\n               of the multi-index as a separate row in the CSV file.\n\n            Write MultiIndex columns as a list of tuples (if True) or in\n            the new, expanded format, where each MultiIndex column is a row\n            in the CSV (if False).\n        date_format : string, default None\n            Format string for datetime objects\n        decimal: string, default \'.\'\n            Character recognized as decimal separator. E.g. use \',\' for\n            European data\n\n        .. versionchanged:: 0.24.0\n            The order of arguments for Series was changed.\n        '
    df = (self if isinstance(self, ABCDataFrame) else self.to_frame())
    if (tupleize_cols is not None):
        warnings.warn("The 'tupleize_cols' parameter is deprecated and will be removed in a future version", FutureWarning, stacklevel=2)
    else:
        tupleize_cols = False
    from pandas.io.formats.csvs import CSVFormatter
    formatter = CSVFormatter(df, path_or_buf, line_terminator=line_terminator, sep=sep, encoding=encoding, compression=compression, quoting=quoting, na_rep=na_rep, float_format=float_format, cols=columns, header=header, index=index, index_label=index_label, mode=mode, chunksize=chunksize, quotechar=quotechar, tupleize_cols=tupleize_cols, date_format=date_format, doublequote=doublequote, escapechar=escapechar, decimal=decimal)
    formatter.save()
    if (path_or_buf is None):
        return formatter.path_or_buf.getvalue()