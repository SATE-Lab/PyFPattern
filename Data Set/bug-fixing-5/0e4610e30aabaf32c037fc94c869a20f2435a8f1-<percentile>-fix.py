def percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False):
    "\n    Compute the qth percentile of the data along the specified axis.\n\n    Returns the qth percentile(s) of the array elements.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    q : float in range of [0,100] (or sequence of floats)\n        Percentile to compute, which must be between 0 and 100 inclusive.\n    axis : {int, sequence of int, None}, optional\n        Axis or axes along which the percentiles are computed. The\n        default is to compute the percentile(s) along a flattened\n        version of the array. A sequence of axes is supported since\n        version 1.9.0.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output,\n        but the type (of the output) will be cast if necessary.\n    overwrite_input : bool, optional\n        If True, then allow use of memory of input array `a`\n        calculations. The input array will be modified by the call to\n        `percentile`. This will save memory when you do not need to\n        preserve the contents of the input array. In this case you\n        should not make any assumptions about the contents of the input\n        `a` after this function completes -- treat it as undefined.\n        Default is False. If `a` is not already an array, this parameter\n        will have no effect as `a` will be converted to an array\n        internally regardless of the value of this parameter.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to\n        use when the desired quantile lies between two data points\n        ``i < j``:\n            * linear: ``i + (j - i) * fraction``, where ``fraction``\n              is the fractional part of the index surrounded by ``i``\n              and ``j``.\n            * lower: ``i``.\n            * higher: ``j``.\n            * nearest: ``i`` or ``j``, whichever is nearest.\n            * midpoint: ``(i + j) / 2``.\n\n        .. versionadded:: 1.9.0\n    keepdims : bool, optional\n        If this is set to True, the axes which are reduced are left in\n        the result as dimensions with size one. With this option, the\n        result will broadcast correctly against the original array `a`.\n\n        .. versionadded:: 1.9.0\n\n    Returns\n    -------\n    percentile : scalar or ndarray\n        If `q` is a single percentile and `axis=None`, then the result\n        is a scalar. If multiple percentiles are given, first axis of\n        the result corresponds to the percentiles. The other axes are\n        the axes that remain after the reduction of `a`. If the input\n        contains integers or floats smaller than ``float64``, the output\n        data-type is ``float64``. Otherwise, the output data-type is the\n        same as that of the input. If `out` is specified, that array is\n        returned instead.\n\n    See Also\n    --------\n    mean, median, nanpercentile\n\n    Notes\n    -----\n    Given a vector ``V`` of length ``N``, the ``q``-th percentile of\n    ``V`` is the value ``q/100`` of the way from the minimum to the\n    maximum in a sorted copy of ``V``. The values and distances of\n    the two nearest neighbors as well as the `interpolation` parameter\n    will determine the percentile if the normalized ranking does not\n    match the location of ``q`` exactly. This function is the same as\n    the median if ``q=50``, the same as the minimum if ``q=0`` and the\n    same as the maximum if ``q=100``.\n\n    Examples\n    --------\n    >>> a = np.array([[10, 7, 4], [3, 2, 1]])\n    >>> a\n    array([[10,  7,  4],\n           [ 3,  2,  1]])\n    >>> np.percentile(a, 50)\n    3.5\n    >>> np.percentile(a, 50, axis=0)\n    array([[ 6.5,  4.5,  2.5]])\n    >>> np.percentile(a, 50, axis=1)\n    array([ 7.,  2.])\n    >>> np.percentile(a, 50, axis=1, keepdims=True)\n    array([[ 7.],\n           [ 2.]])\n\n    >>> m = np.percentile(a, 50, axis=0)\n    >>> out = np.zeros_like(m)\n    >>> np.percentile(a, 50, axis=0, out=out)\n    array([[ 6.5,  4.5,  2.5]])\n    >>> m\n    array([[ 6.5,  4.5,  2.5]])\n\n    >>> b = a.copy()\n    >>> np.percentile(b, 50, axis=1, overwrite_input=True)\n    array([ 7.,  2.])\n    >>> assert not np.all(a == b)\n\n    "
    q = array(q, dtype=np.float64, copy=True)
    (r, k) = _ureduce(a, func=_percentile, q=q, axis=axis, out=out, overwrite_input=overwrite_input, interpolation=interpolation)
    if keepdims:
        return r.reshape((q.shape + k))
    else:
        return r