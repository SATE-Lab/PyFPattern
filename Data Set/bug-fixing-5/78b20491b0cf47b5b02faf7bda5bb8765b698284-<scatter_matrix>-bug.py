def scatter_matrix(frame, alpha=0.5, figsize=None, ax=None, grid=False, diagonal='hist', marker='.', density_kwds=None, hist_kwds=None, range_padding=0.05, **kwds):
    "\n    Draw a matrix of scatter plots.\n\n    Parameters\n    ----------\n    frame : DataFrame\n    alpha : float, optional\n        amount of transparency applied\n    figsize : (float,float), optional\n        a tuple (width, height) in inches\n    ax : Matplotlib axis object, optional\n    grid : bool, optional\n        setting this to True will show the grid\n    diagonal : {'hist', 'kde'}\n        pick between 'kde' and 'hist' for\n        either Kernel Density Estimation or Histogram\n        plot in the diagonal\n    marker : str, optional\n        Matplotlib marker type, default '.'\n    hist_kwds : other plotting keyword arguments\n        To be passed to hist function\n    density_kwds : other plotting keyword arguments\n        To be passed to kernel density estimate plot\n    range_padding : float, optional\n        relative extension of axis range in x and y\n        with respect to (x_max - x_min) or (y_max - y_min),\n        default 0.05\n    kwds : other plotting keyword arguments\n        To be passed to scatter function\n\n    Returns\n    -------\n    numpy.ndarray\n        A matrix of scatter plots.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.random.randn(1000, 4), columns=['A','B','C','D'])\n    >>> scatter_matrix(df, alpha=0.2)\n    "
    plot_backend = _get_plot_backend('matplotlib')
    return plot_backend.scatter_matrix(frame=frame, alpha=alpha, figsize=figsize, ax=ax, grid=grid, diagonal=diagonal, marker=marker, density_kwds=density_kwds, hist_kwds=hist_kwds, range_padding=range_padding, **kwds)