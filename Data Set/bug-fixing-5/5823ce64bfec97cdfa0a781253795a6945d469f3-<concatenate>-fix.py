@set_module('mxnet.symbol.numpy')
def concatenate(seq, axis=0, out=None):
    'Join a sequence of arrays along an existing axis.\n\n    Parameters\n    ----------\n    a1, a2, ... : sequence of _Symbols\n        The arrays must have the same shape, except in the dimension\n        corresponding to `axis` (the first, by default).\n    axis : int, optional\n        The axis along which the arrays will be joined.  If axis is None,\n        arrays are flattened before use.  Default is 0.\n    out : ndarray, optional\n        If provided, the destination to place the result. The shape must be\n        correct, matching that of what concatenate would have returned if no\n        out argument were specified.\n\n    Returns\n    -------\n    res : _Symbol\n        The concatenated array.\n\n    Examples\n    --------\n    >>> a = np.array([[1, 2], [3, 4]])\n    >>> b = np.array([[5, 6]])\n    >>> np.concatenate((a, b), axis=0)\n    array([[1., 2.],\n           [3., 4.],\n           [5., 6.]])\n\n    >>> np.concatenate((a, b), axis=None)\n    array([1., 2., 3., 4., 5., 6.])\n\n    >>> np.concatenate((a, b.T), axis=1)\n    array([[1., 2., 5.],\n           [3., 4., 6.]])\n    '
    return _npi.concatenate(*seq, axis=axis, out=out)