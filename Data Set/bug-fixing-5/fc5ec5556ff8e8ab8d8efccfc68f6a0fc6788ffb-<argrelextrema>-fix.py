def argrelextrema(data, comparator, axis=0, order=1, mode='clip'):
    "\n    Calculate the relative extrema of `data`.\n\n    Parameters\n    ----------\n    data : ndarray\n        Array in which to find the relative extrema.\n    comparator : callable\n        Function to use to compare two data points.\n        Should take two arrays as arguments.\n    axis : int, optional\n        Axis over which to select from `data`.  Default is 0.\n    order : int, optional\n        How many points on each side to use for the comparison\n        to consider ``comparator(n, n+x)`` to be True.\n    mode : str, optional\n        How the edges of the vector are treated.  'wrap' (wrap around) or\n        'clip' (treat overflow as the same as the last (or first) element).\n        Default is 'clip'.  See `numpy.take`.\n\n    Returns\n    -------\n    extrema : tuple of ndarrays\n        Indices of the maxima in arrays of integers.  ``extrema[k]`` is\n        the array of indices of axis `k` of `data`.  Note that the\n        return value is a tuple even when `data` is one-dimensional.\n\n    See Also\n    --------\n    argrelmin, argrelmax\n\n    Notes\n    -----\n\n    .. versionadded:: 0.11.0\n\n    Examples\n    --------\n    >>> from scipy.signal import argrelextrema\n    >>> x = np.array([2, 1, 2, 3, 2, 0, 1, 0])\n    >>> argrelextrema(x, np.greater)\n    (array([3, 6]),)\n    >>> y = np.array([[1, 2, 1, 2],\n    ...               [2, 2, 0, 0],\n    ...               [5, 3, 4, 4]])\n    ...\n    >>> argrelextrema(y, np.less, axis=1)\n    (array([0, 2]), array([2, 1]))\n\n    "
    results = _boolrelextrema(data, comparator, axis, order, mode)
    return np.where(results)