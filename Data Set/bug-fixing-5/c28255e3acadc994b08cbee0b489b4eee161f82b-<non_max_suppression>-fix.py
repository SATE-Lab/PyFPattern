def non_max_suppression(boxes, scores, max_output_size, iou_threshold=0.5, name=None):
    'Greedily selects a subset of bounding boxes in descending order of score.\n\n  Prunes away boxes that have high intersection-over-union (IOU) overlap\n  with previously selected boxes.  Bounding boxes are supplied as\n  [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any\n  diagonal pair of box corners and the coordinates can be provided as normalized\n  (i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm\n  is agnostic to where the origin is in the coordinate system.  Note that this\n  algorithm is invariant to orthogonal transformations and translations\n  of the coordinate system; thus translating or reflections of the coordinate\n  system result in the same boxes being selected by the algorithm.\n  The output of this operation is a set of integers indexing into the input\n  collection of bounding boxes representing the selected boxes.  The bounding\n  box coordinates corresponding to the selected indices can then be obtained\n  using the `tf.gather operation`.  For example:\n    ```python\n    selected_indices = tf.image.non_max_suppression(\n        boxes, scores, max_output_size, iou_threshold)\n    selected_boxes = tf.gather(boxes, selected_indices)\n    ```\n\n  Args:\n    boxes: A 2-D float `Tensor` of shape `[num_boxes, 4]`.\n    scores: A 1-D float `Tensor` of shape `[num_boxes]` representing a single\n      score corresponding to each box (each row of boxes).\n    max_output_size: A scalar integer `Tensor` representing the maximum number\n      of boxes to be selected by non max suppression.\n    iou_threshold: A float representing the threshold for deciding whether boxes\n      overlap too much with respect to IOU.\n    name: A name for the operation (optional).\n\n  Returns:\n    selected_indices: A 1-D integer `Tensor` of shape `[M]` representing the\n      selected indices from the boxes tensor, where `M <= max_output_size`.\n  '
    with ops.name_scope(name, 'non_max_suppression'):
        iou_threshold = ops.convert_to_tensor(iou_threshold, name='iou_threshold')
        return gen_image_ops._non_max_suppression_v2(boxes, scores, max_output_size, iou_threshold)