@classmethod
def from_intervals(cls, data, closed=None, name=None, copy=False, dtype=None):
    "\n        Construct an IntervalIndex from a 1d array of Interval objects\n\n        .. deprecated:: 0.23.0\n\n        Parameters\n        ----------\n        data : array-like (1-dimensional)\n            Array of Interval objects. All intervals must be closed on the same\n            sides.\n        name : object, optional\n            Name to be stored in the index.\n        copy : boolean, default False\n            by-default copy the data, this is compat only and ignored\n        dtype : dtype or None, default None\n            If None, dtype will be inferred\n\n            ..versionadded:: 0.23.0\n\n        Examples\n        --------\n        >>> pd.IntervalIndex.from_intervals([pd.Interval(0, 1),\n        ...                                  pd.Interval(1, 2)])\n        IntervalIndex([(0, 1], (1, 2]]\n                      closed='right', dtype='interval[int64]')\n\n        The generic Index constructor work identically when it infers an array\n        of all intervals:\n\n        >>> pd.Index([pd.Interval(0, 1), pd.Interval(1, 2)])\n        IntervalIndex([(0, 1], (1, 2]]\n                      closed='right', dtype='interval[int64]')\n\n        See Also\n        --------\n        interval_range : Function to create a fixed frequency IntervalIndex\n        IntervalIndex.from_arrays : Construct an IntervalIndex from a left and\n                                    right array\n        IntervalIndex.from_breaks : Construct an IntervalIndex from an array of\n                                    splits\n        IntervalIndex.from_tuples : Construct an IntervalIndex from a\n                                    list/array of tuples\n        "
    msg = 'IntervalIndex.from_intervals is deprecated and will be removed in a future version; use IntervalIndex(...) instead'
    warnings.warn(msg, FutureWarning, stacklevel=2)
    return cls(data, closed=closed, name=name, copy=copy, dtype=dtype)