def test_apply_broadcast(self):
    result = self.frame.apply(np.mean, result_type='broadcast')
    expected = DataFrame([self.frame.mean()], index=self.frame.index)
    tm.assert_frame_equal(result, expected)
    result = self.frame.apply(np.mean, axis=1, result_type='broadcast')
    m = self.frame.mean(axis=1)
    expected = DataFrame({c: m for c in self.frame.columns})
    tm.assert_frame_equal(result, expected)
    result = self.frame.apply((lambda x: list(range(len(self.frame.columns)))), axis=1, result_type='broadcast')
    m = list(range(len(self.frame.columns)))
    expected = DataFrame(([m] * len(self.frame.index)), dtype='float64', index=self.frame.index, columns=self.frame.columns)
    tm.assert_frame_equal(result, expected)
    result = self.frame.apply((lambda x: list(range(len(self.frame.index)))), result_type='broadcast')
    m = list(range(len(self.frame.index)))
    expected = DataFrame({c: m for c in self.frame.columns}, dtype='float64', index=self.frame.index)
    tm.assert_frame_equal(result, expected)
    df = DataFrame((np.tile(np.arange(3), 6).reshape(6, (- 1)) + 1), columns=list('ABC'))
    result = df.apply((lambda x: [1, 2, 3]), axis=1, result_type='broadcast')
    tm.assert_frame_equal(result, df)
    df = DataFrame((np.tile(np.arange(3), 6).reshape(6, (- 1)) + 1), columns=list('ABC'))
    result = df.apply((lambda x: Series([1, 2, 3], index=list('abc'))), axis=1, result_type='broadcast')
    expected = df.copy()
    tm.assert_frame_equal(result, expected)