def test_simplify_expr():
    (x, y, z, k, n, m, w, s, A) = symbols('x,y,z,k,n,m,w,s,A')
    f = Function('f')
    assert all(((simplify(tmp) == tmp) for tmp in [I, E, oo, x, (- x), (- oo), (- E), (- I)]))
    e = ((1 / x) + (1 / y))
    assert (e != ((x + y) / (x * y)))
    assert (simplify(e) == ((x + y) / (x * y)))
    e = (((A ** 2) * (s ** 4)) / (((4 * pi) * k) * (m ** 3)))
    assert (simplify(e) == e)
    e = (((4 + (4 * x)) - (2 * (2 + (2 * x)))) / (2 + (2 * x)))
    assert (simplify(e) == 0)
    e = ((((((- 4) * x) * (y ** 2)) - (2 * (y ** 3))) - ((2 * (x ** 2)) * y)) / ((x + y) ** 2))
    assert (simplify(e) == ((- 2) * y))
    e = ((((- x) - y) - (((x + y) ** (- 1)) * (y ** 2))) + (((x + y) ** (- 1)) * (x ** 2)))
    assert (simplify(e) == ((- 2) * y))
    e = ((x + (x * y)) / x)
    assert (simplify(e) == (1 + y))
    e = ((f(x) + (y * f(x))) / f(x))
    assert (simplify(e) == (1 + y))
    e = ((2 * ((1 / n) - (cos((n * pi)) / n))) / pi)
    assert (simplify(e) == ((((- cos((pi * n))) + 1) / (pi * n)) * 2))
    e = integrate((1 / ((x ** 3) + 1)), x).diff(x)
    assert (simplify(e) == (1 / ((x ** 3) + 1)))
    e = integrate((x / (((x ** 2) + (3 * x)) + 1)), x).diff(x)
    assert (simplify(e) == (x / (((x ** 2) + (3 * x)) + 1)))
    f = Symbol('f')
    A = Matrix([[((2 * k) - (m * (w ** 2))), (- k)], [(- k), (k - (m * (w ** 2)))]]).inv()
    assert (simplify((A * Matrix([0, f]))[1]) == (((- f) * ((2 * k) - (m * (w ** 2)))) / ((k ** 2) - ((k - (m * (w ** 2))) * ((2 * k) - (m * (w ** 2)))))))
    f = (((((- x) + (y / (z + t))) + ((z * x) / (z + t))) + ((z * a) / (z + t))) + ((t * x) / (z + t)))
    assert (simplify(f) == ((y + (a * z)) / (z + t)))
    expr = (((((((((((- x) * ((y ** 2) - 1)) * ((((2 * (y ** 2)) * ((x ** 2) - 1)) / (a * (((x ** 2) - (y ** 2)) ** 2))) + (((x ** 2) - 1) / (a * ((x ** 2) - (y ** 2)))))) / (a * ((x ** 2) - (y ** 2)))) + ((((x * (((((((- 2) * (x ** 2)) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * sin(z)) / (a * (((x ** 2) - (y ** 2)) ** 2))) - ((((x ** 2) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * sin(z)) / ((a * ((x ** 2) - 1)) * ((x ** 2) - (y ** 2))))) + (((((((x ** 2) * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * sin(z)) / ((x ** 2) - 1)) + ((sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1))) * (((x * (((- x) * (y ** 2)) + x)) / sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) + sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1)))) * sin(z))) / ((a * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * ((x ** 2) - (y ** 2)))))) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * sin(z)) / (a * ((x ** 2) - (y ** 2))))) + ((((x * (((((((- 2) * (x ** 2)) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * cos(z)) / (a * (((x ** 2) - (y ** 2)) ** 2))) - ((((x ** 2) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * cos(z)) / ((a * ((x ** 2) - 1)) * ((x ** 2) - (y ** 2))))) + ((((((((x ** 2) * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * cos(z)) / ((x ** 2) - 1)) + ((((x * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * (((- x) * (y ** 2)) + x)) * cos(z)) / sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1)))) + ((sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1))) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * cos(z))) / ((a * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * ((x ** 2) - (y ** 2)))))) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * cos(z)) / (a * ((x ** 2) - (y ** 2))))) - ((((y * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * (((((((- x) * y) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * sin(z)) / ((a * ((x ** 2) - (y ** 2))) * ((y ** 2) - 1))) + (((((2 * x) * y) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * sin(z)) / (a * (((x ** 2) - (y ** 2)) ** 2)))) + (((((((x * y) * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * sin(z)) / ((y ** 2) - 1)) + ((((x * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * (((- (x ** 2)) * y) + y)) * sin(z)) / sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1)))) / ((a * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * ((x ** 2) - (y ** 2)))))) * sin(z)) / (a * ((x ** 2) - (y ** 2))))) + (((y * ((x ** 2) - 1)) * ((((((- 2) * x) * y) * ((x ** 2) - 1)) / (a * (((x ** 2) - (y ** 2)) ** 2))) + (((2 * x) * y) / (a * ((x ** 2) - (y ** 2)))))) / (a * ((x ** 2) - (y ** 2))))) + (((((y * ((x ** 2) - 1)) * ((y ** 2) - 1)) * (((((((- x) * y) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * cos(z)) / ((a * ((x ** 2) - (y ** 2))) * ((y ** 2) - 1))) + (((((2 * x) * y) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * cos(z)) / (a * (((x ** 2) - (y ** 2)) ** 2)))) + (((((((x * y) * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * cos(z)) / ((y ** 2) - 1)) + ((((x * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * (((- (x ** 2)) * y) + y)) * cos(z)) / sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1)))) / ((a * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * ((x ** 2) - (y ** 2)))))) * cos(z)) / ((a * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * ((x ** 2) - (y ** 2))))) - ((((x * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * (sin(z) ** 2)) / ((((a ** 2) * ((x ** 2) - 1)) * ((x ** 2) - (y ** 2))) * ((y ** 2) - 1)))) - ((((x * sqrt((((- (x ** 2)) + 1) * ((y ** 2) - 1)))) * sqrt((((((- (x ** 2)) * (y ** 2)) + (x ** 2)) + (y ** 2)) - 1))) * (cos(z) ** 2)) / ((((a ** 2) * ((x ** 2) - 1)) * ((x ** 2) - (y ** 2))) * ((y ** 2) - 1))))
    assert (simplify(expr) == ((2 * x) / ((a ** 2) * ((x ** 2) - (y ** 2)))))
    (A, B) = symbols('A,B', commutative=False)
    assert (simplify(((A * B) - (B * A))) == ((A * B) - (B * A)))
    assert (simplify((A / (1 + (y / x)))) == ((x * A) / (x + y)))
    assert (simplify((A * ((1 / x) + (1 / y)))) == ((A / x) + (A / y)))
    assert (simplify((log(2) + log(3))) == log(6))
    assert (simplify((log((2 * x)) - log(2))) == log(x))
    assert (simplify(hyper([], [], x)) == exp(x))