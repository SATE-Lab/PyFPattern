def main():
    parser = argparse.ArgumentParser(description='Chainer example: End-to-end memory networks')
    parser.add_argument('TRAIN_DATA', help='Path to training data in bAbI dataset (e.g. "qa1_single-supporting-fact_train.txt")')
    parser.add_argument('TEST_DATA', help='Path to test data in bAbI dataset (e.g. "qa1_single-supporting-fact_test.txt")')
    parser.add_argument('--model', '-m', default='model', help='Model directory where it stores trained model')
    parser.add_argument('--batchsize', '-b', type=int, default=100, help='Number of images in each mini batch')
    parser.add_argument('--epoch', '-e', type=int, default=100, help='Number of sweeps over the dataset to train')
    parser.add_argument('--device', '-d', type=str, default='-1', help='Device specifier. Either ChainerX device specifier or an integer. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')
    parser.add_argument('--unit', '-u', type=int, default=20, help='Number of units')
    parser.add_argument('--hop', '-H', type=int, default=3, help='Number of hops')
    parser.add_argument('--max-memory', type=int, default=50, help='Maximum number of memory')
    parser.add_argument('--sentence-repr', choices=['bow', 'pe'], default='bow', help='Sentence representation. Select from BoW ("bow") or position encoding ("pe")')
    group = parser.add_argument_group('deprecated arguments')
    group.add_argument('--gpu', '-g', dest='device', type=int, nargs='?', const=0, help='GPU ID (negative value indicates CPU)')
    args = parser.parse_args()
    if (chainer.get_dtype() == numpy.float16):
        warnings.warn('This example may cause NaN in FP16 mode.', RuntimeWarning)
    train(args.TRAIN_DATA, args.TEST_DATA, args)