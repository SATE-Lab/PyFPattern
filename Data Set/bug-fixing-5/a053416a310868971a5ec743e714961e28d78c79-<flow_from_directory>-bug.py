def flow_from_directory(self, directory, target_size=(256, 256), color_mode='rgb', classes=None, class_mode='categorical', batch_size=32, shuffle=True, seed=None, save_to_dir=None, save_prefix='', save_format='png', follow_links=False, subset=None, interpolation='nearest'):
    'Takes the path to a directory, and generates batches of augmented/normalized data.\n\n        # Arguments\n                directory: path to the target directory.\n                 It should contain one subdirectory per class.\n                 Any PNG, JPG, BMP, PPM or TIF images inside each of the subdirectories directory tree will be included in the generator.\n                See [this script](https://gist.github.com/fchollet/0830affa1f7f19fd47b06d4cf89ed44d) for more details.\n                target_size: tuple of integers `(height, width)`, default: `(256, 256)`.\n                 The dimensions to which all images found will be resized.\n                color_mode: one of "grayscale", "rbg". Default: "rgb".\n                 Whether the images will be converted to have 1 or 3 color channels.\n                classes: optional list of class subdirectories (e.g. `[\'dogs\', \'cats\']`).\n                 Default: None. If not provided, the list of classes will\n                 be automatically inferred from the subdirectory names/structure under `directory`,\n                 where each subdirectory will be treated as a different class\n                 (and the order of the classes, which will map to the label indices, will be alphanumeric).\n                 The dictionary containing the mapping from class names to class\n                 indices can be obtained via the attribute `class_indices`.\n                class_mode: one of "categorical", "binary", "sparse", "input" or None.\n                 Default: "categorical". Determines the type of label arrays that are\n                 returned: "categorical" will be 2D one-hot encoded labels, "binary" will be 1D binary labels,\n                 "sparse" will be 1D integer labels, "input" will be images identical to input images (mainly used to work with autoencoders).\n                 If None, no labels are returned (the generator will only yield batches of image data, which is useful to use\n                 `model.predict_generator()`, `model.evaluate_generator()`, etc.).\n                  Please note that in case of class_mode None,\n                   the data still needs to reside in a subdirectory of `directory` for it to work correctly.\n                batch_size: size of the batches of data (default: 32).\n                shuffle: whether to shuffle the data (default: True)\n                seed: optional random seed for shuffling and transformations.\n                save_to_dir: None or str (default: None). This allows you to optionally specify a directory to which to save\n                 the augmented pictures being generated (useful for visualizing what you are doing).\n                save_prefix: str. Prefix to use for filenames of saved pictures (only relevant if `save_to_dir` is set).\n                save_format: one of "png", "jpeg" (only relevant if `save_to_dir` is set). Default: "png".\n                follow_links: whether to follow symlinks inside class subdirectories (default: False).\n                subset: Subset of data (`"training"` or `"validation"`) if\n                 `validation_split` is set in `ImageDataGenerator`.\n                interpolation: Interpolation method used to resample the image if the\n                 target size is different from that of the loaded image.\n                 Supported methods are `"nearest"`, `"bilinear"`, and `"bicubic"`.\n                 If PIL version 1.1.3 or newer is installed, `"lanczos"` is also\n                 supported. If PIL version 3.4.0 or newer is installed, `"box"` and\n                 `"hamming"` are also supported. By default, `"nearest"` is used.\n\n        # Returns\n            A DirectoryIterator yielding tuples of `(x, y)` where `x` is a numpy array of image data and\n             `y` is a numpy array of corresponding labels.\n        '
    return DirectoryIterator(directory, self, target_size=target_size, color_mode=color_mode, classes=classes, class_mode=class_mode, data_format=self.data_format, batch_size=batch_size, shuffle=shuffle, seed=seed, save_to_dir=save_to_dir, save_prefix=save_prefix, save_format=save_format, follow_links=follow_links, subset=subset, interpolation=interpolation)