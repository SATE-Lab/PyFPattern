def test_solve_discrete_are():
    cases = [(np.array([[2, (1 - 2j)], [0, (- 3j)]]), np.array([[0], [1]]), np.array([[1, 0], [0, 2]]), np.array([[1]]), None), (np.array([[2, 1], [0, (- 1)]]), np.array([[(- 2j)], [1j]]), np.array([[1, 0], [0, 2]]), np.array([[1]]), None), (np.array([[3, 1], [0, (- 1)]]), np.array([[1, 2], [1, 3]]), np.array([[1, (1 + 1j)], [(1 - 1j), 2]]), np.array([[2, (- 2j)], [2j, 3]]), None), (np.array([[0.63399379, 0.54906824, 0.76253406], [0.5404729, 0.53745766, 0.08731853], [0.27524045, 0.84922129, 0.4681622]]), np.array([[0.96861695], [0.05532739], [0.78934047]]), np.eye(3), np.eye(1), None), (np.array([[4, 3], [(- 4.5), (- 3.5)]]), np.array([[1], [(- 1)]]), np.array([[9, 6], [6, 4]]), np.array([[1]]), None), (np.array([[0.9512, 0], [0, 0.9048]]), np.array([[4.877, 4.877], [(- 1.1895), 3.569]]), np.array([[0.005, 0], [0, 0.02]]), np.array([[(1 / 3), 0], [0, 3]]), None), (np.array([[2, (- 1)], [1, 0]]), np.array([[1], [0]]), np.array([[0, 0], [0, 1]]), np.array([[0]]), None), (np.array([[0, 1], [0, (- 1)]]), np.array([[1, 0], [2, 1]]), (np.array([[(- 4), (- 4)], [(- 4), 7]]) * (1 / 11)), np.array([[9, 3], [3, 1]]), None), (np.array([[0, 1], [0, 0]]), np.array([[0], [1]]), np.array([[1, 2], [2, 4]]), np.array([[1]]), None), (np.array([[0.998, 0.067, 0, 0], [(- 0.067), 0.998, 0, 0], [0, 0, 0.998, 0.153], [0, 0, (- 0.153), 0.998]]), np.array([[0.0033, 0.02], [0.1, (- 0.0007)], [0.04, 0.0073], [(- 0.0028), 0.1]]), np.array([[1.87, 0, 0, (- 0.244)], [0, 0.744, 0.205, 0], [0, 0.205, 0.589, 0], [(- 0.244), 0, 0, 1.048]]), np.eye(2), None), (np.array([[0.98475, (- 0.079903), 0.0009054, (- 0.0010765)], [0.041588, 0.99899, (- 0.035855), 0.012684], [(- 0.54662), 0.044916, (- 0.32991), 0.19318], [2.6624, (- 0.10045), (- 0.92455), (- 0.26325)]]), np.array([[0.0037112, 0.0007361], [(- 0.087051), 9.3411e-06], [(- 1.19844), (- 0.00041378)], [(- 3.1927), 0.00092535]]), (np.eye(4) * 0.01), np.eye(2), None), (np.array([[(- 0.6), (- 2.2), (- 3.6), (- 5.400018)], [1.0, 0.6, 0.8, 3.399982], [0.0, 1.0, 1.8, 3.799982], [0.0, 0.0, 0.0, (- 0.999982)]]), np.array([[1.0, (- 1.0), (- 1.0), (- 1.0)], [0.0, 1.0, (- 1.0), (- 1.0)], [0.0, 0.0, 1.0, (- 1.0)], [0.0, 0.0, 0.0, 1.0]]), np.array([[2, 1, 3, 6], [1, 2, 2, 5], [3, 2, 6, 11], [6, 5, 11, 22]]), np.eye(4), None), ((np.array([[95.407, 1.9643, 0.3597, 0.0673, 0.019], [40.849, 41.317, 16.084, 4.4679, 1.1971], [12.217, 26.326, 36.149, 15.93, 12.383], [4.1118, 12.858, 27.209, 21.442, 40.976], [0.1305, 0.5808, 1.875, 3.6162, 94.28]]) * 0.01), (np.array([[0.0434, (- 0.0122)], [2.6606, (- 1.0453)], [3.753, (- 5.51)], [3.6076, (- 6.6)], [0.4617, (- 0.9148)]]) * 0.01), np.eye(5), np.eye(2), None), (np.kron(np.eye(2), np.diag([1, 1], k=1)), np.kron(np.eye(2), np.array([[0], [0], [1]])), np.array([[1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 1, (- 1), 0], [0, 0, 0, (- 1), 1, 0], [0, 0, 0, 0, 0, 0]]), np.array([[3, 0], [0, 1]]), None), ((0.001 * np.array([[870.1, 135.0, 11.59, 0.5014, (- 37.22), 0.3484, 0, 4.242, 7.249], [76.55, 897.4, 12.72, 0.5504, (- 40.16), 0.3743, 0, 4.53, 7.499], [(- 127.2), 357.5, 817, 1.455, (- 102.8), 0.987, 0, 11.85, 18.72], [(- 363.5), 633.9, 74.91, 796.6, (- 273.5), 2.653, 0, 31.72, 48.82], [(- 960), 1645.9, (- 128.9), (- 5.597), 71.42, 7.108, 0, 84.52, 125.9], [(- 664.4), 112.96, (- 88.89), (- 3.854), 84.47, 13.6, 0, 144.3, 101.6], [(- 410.2), 693, (- 54.71), (- 2.371), 66.49, 12.49, 0.1063, 99.97, 69.67], [(- 179.9), 301.7, (- 23.93), (- 1.035), 60.59, 22.16, 0, 213.9, 35.54], [(- 345.1), 580.4, (- 45.96), (- 1.989), 105.6, 19.86, 0, 219.1, 215.2]])), (np.array([[4.76, (- 0.5701), (- 83.68)], [0.879, (- 4.773), (- 2.73)], [1.482, (- 13.12), 8.876], [3.892, (- 35.13), 24.8], [10.34, (- 92.75), 66.8], [7.203, (- 61.59), 38.34], [4.454, (- 36.83), 20.29], [1.971, (- 15.54), 6.937], [3.773, (- 30.28), 14.69]]) * 0.001), np.diag([50, 0, 0, 0, 50, 0, 0, 0, 0]), np.eye(3), None), (np.array([[0, 1000000.0], [0, 0]]), np.array([[0], [1]]), np.eye(2), np.array([[1]]), None), ((np.array([[16, 10, (- 2)], [10, 13, (- 8)], [(- 2), (- 8), 7]]) * (1 / 9)), np.eye(3), (1000000.0 * np.eye(3)), (1000000.0 * np.eye(3)), None), (np.array([[(1 - (1 / 100000000.0)), 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0]]), np.array([[1e-08], [0], [0], [0]]), np.diag([0, 0, 0, 1]), np.array([[0.25]]), None), (np.eye(100, k=1), np.flipud(np.eye(100, 1)), np.eye(100), np.array([[1]]), None)]
    min_decimal = (12, 14, 14, 14, 13, 16, 18, 15, 15, 13, 14, 13, 13, 14, 12, 2, 5, 6, 10)

    def _test_factory(case, dec):
        "Checks if X = A'XA-(A'XB)(R+B'XB)^-1(B'XA)+Q) is true"
        (a, b, q, r, knownfailure) = case
        if knownfailure:
            raise KnownFailureTest(knownfailure)
        x = solve_discrete_are(a, b, q, r)
        res = ((a.conj().T.dot(x.dot(a)) - x) + q)
        res -= a.conj().T.dot(x.dot(b)).dot(solve((r + b.conj().T.dot(x.dot(b))), b.conj().T).dot(x.dot(a)))
        assert_array_almost_equal(res, np.zeros_like(res), decimal=dec)
    for (ind, case) in enumerate(cases):
        (yield (_test_factory, case, min_decimal[ind]))