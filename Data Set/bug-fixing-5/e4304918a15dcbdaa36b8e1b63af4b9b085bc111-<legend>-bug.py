@docstring.dedent_interpd
def legend(self, *args, **kwargs):
    "\n        Place a legend on the axes.\n\n        Call signatures::\n\n            legend()\n            legend(labels)\n            legend(handles, labels)\n\n        The call signatures correspond to three different ways how to use\n        this method.\n\n        **1. Automatic detection of elements to be shown in the legend**\n\n        The elements to be added to the legend are automatically determined,\n        when you do not pass in any extra arguments.\n\n        In this case, the labels are taken from the artist. You can specify\n        them either at artist creation or by calling the\n        :meth:`~.Artist.set_label` method on the artist::\n\n            line, = ax.plot([1, 2, 3], label='Inline label')\n            ax.legend()\n\n        or::\n\n            line.set_label('Label via method')\n            line, = ax.plot([1, 2, 3])\n            ax.legend()\n\n        Specific lines can be excluded from the automatic legend element\n        selection by defining a label starting with an underscore.\n        This is default for all artists, so calling `Axes.legend` without\n        any arguments and without setting the labels manually will result in\n        no legend being drawn.\n\n\n        **2. Labeling existing plot elements**\n\n        To make a legend for lines which already exist on the axes\n        (via plot for instance), simply call this function with an iterable\n        of strings, one for each legend item. For example::\n\n            ax.plot([1, 2, 3])\n            ax.legend(['A simple line'])\n\n        Note: This way of using is discouraged, because the relation between\n        plot elements and labels is only implicit by their order and can\n        easily be mixed up.\n\n\n        **3. Explicitly defining the elements in the legend**\n\n        For full control of which artists have a legend entry, it is possible\n        to pass an iterable of legend artists followed by an iterable of\n        legend labels respectively::\n\n            legend((line1, line2, line3), ('label1', 'label2', 'label3'))\n\n        Parameters\n        ----------\n\n        handles : sequence of `.Artist`, optional\n            A list of Artists (lines, patches) to be added to the legend.\n            Use this together with *labels*, if you need full control on what\n            is shown in the legend and the automatic mechanism described above\n            is not sufficient.\n\n            The length of handles and labels should be the same in this\n            case. If they are not, they are truncated to the smaller length.\n\n        labels : sequence of strings, optional\n            A list of labels to show next to the artists.\n            Use this together with *handles*, if you need full control on what\n            is shown in the legend and the automatic mechanism described above\n            is not sufficient.\n\n        Other Parameters\n        ----------------\n\n        %(_legend_kw_doc)s\n\n        Returns\n        -------\n\n        :class:`matplotlib.legend.Legend` instance\n\n        Notes\n        -----\n\n        Not all kinds of artist are supported by the legend command. See\n        :doc:`/tutorials/intermediate/legend_guide` for details.\n\n        Examples\n        --------\n\n        .. plot:: gallery/text_labels_and_annotations/legend.py\n\n        "
    (handles, labels, extra_args, kwargs) = mlegend._parse_legend_args([self], *args, **kwargs)
    if len(extra_args):
        raise TypeError('legend only accepts two non-keyword arguments')
    self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)
    self.legend_._remove_method = self._remove_legend
    return self.legend_