

def groupby(self, by=None, axis=0, level=None, as_index=True, sort=True, group_keys=True, squeeze=False, observed=False, **kwargs):
    '\n        Group series using mapper (dict or key function, apply given function\n        to group, return result as series) or by a series of columns.\n\n        Parameters\n        ----------\n        by : mapping, function, label, or list of labels\n            Used to determine the groups for the groupby.\n            If ``by`` is a function, it\'s called on each value of the object\'s\n            index. If a dict or Series is passed, the Series or dict VALUES\n            will be used to determine the groups (the Series\' values are first\n            aligned; see ``.align()`` method). If an ndarray is passed, the\n            values are used as-is determine the groups. A label or list of\n            labels may be passed to group by the columns in ``self``. Notice\n            that a tuple is interpreted a (single) key.\n        axis : int, default 0\n        level : int, level name, or sequence of such, default None\n            If the axis is a MultiIndex (hierarchical), group by a particular\n            level or levels\n        as_index : boolean, default True\n            For aggregated output, return object with group labels as the\n            index. Only relevant for DataFrame input. as_index=False is\n            effectively "SQL-style" grouped output\n        sort : boolean, default True\n            Sort group keys. Get better performance by turning this off.\n            Note this does not influence the order of observations within each\n            group.  groupby preserves the order of rows within each group.\n        group_keys : boolean, default True\n            When calling apply, add group keys to index to identify pieces\n        squeeze : boolean, default False\n            reduce the dimensionality of the return type if possible,\n            otherwise return a consistent type\n        observed : boolean, default False\n            This only applies if any of the groupers are Categoricals\n            If True: only show observed values for categorical groupers.\n            If False: show all values for categorical groupers.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        GroupBy object\n\n        Examples\n        --------\n        DataFrame results\n\n        >>> data.groupby(func, axis=0).mean()\n        >>> data.groupby([\'col1\', \'col2\'])[\'col3\'].mean()\n\n        DataFrame with hierarchical index\n\n        >>> data.groupby([\'col1\', \'col2\']).mean()\n\n        Notes\n        -----\n        See the `user guide\n        <http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\n\n        See also\n        --------\n        resample : Convenience method for frequency conversion and resampling\n            of time series.\n        '
    from pandas.core.groupby.groupby import groupby
    if ((level is None) and (by is None)):
        raise TypeError("You have to supply one of 'by' and 'level'")
    axis = self._get_axis_number(axis)
    return groupby(self, by=by, axis=axis, level=level, as_index=as_index, sort=sort, group_keys=group_keys, squeeze=squeeze, observed=observed, **kwargs)
