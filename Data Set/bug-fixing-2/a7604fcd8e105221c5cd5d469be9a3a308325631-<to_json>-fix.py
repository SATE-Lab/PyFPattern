

def to_json(self, path_or_buf=None, orient=None, date_format='epoch', double_precision=10, force_ascii=True, date_unit='ms', default_handler=None, lines=False):
    "\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : the path or buffer to write the result string\n            if this is None, return a StringIO of the converted string\n        orient : string\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values'}\n\n            * The format of the JSON string\n\n              - split : dict like\n                {index -> [index], columns -> [columns], data -> [values]}\n              - records : list like\n                [{column -> value}, ... , {column -> value}]\n              - index : dict like {index -> {column -> value}}\n              - columns : dict like {column -> {index -> value}}\n              - values : just the values array\n\n        date_format : {'epoch', 'iso'}\n            Type of date conversion. `epoch` = epoch milliseconds,\n            `iso`` = ISO8601, default is epoch.\n        double_precision : The number of decimal places to use when encoding\n            floating point values, default 10.\n        force_ascii : force encoded string to be ASCII, default True.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : boolean, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n\n        Returns\n        -------\n        same type as input object with filtered info axis\n\n        "
    from pandas.io import json
    return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient, date_format=date_format, double_precision=double_precision, force_ascii=force_ascii, date_unit=date_unit, default_handler=default_handler, lines=lines)
