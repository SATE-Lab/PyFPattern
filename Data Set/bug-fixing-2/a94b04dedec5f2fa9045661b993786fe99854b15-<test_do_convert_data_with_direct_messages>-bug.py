

def test_do_convert_data_with_direct_messages(self) -> None:
    mattermost_data_dir = self.fixture_file_name('direct_channel', 'mattermost_fixtures')
    output_dir = self.make_import_output_dir('mattermost')
    do_convert_data(mattermost_data_dir=mattermost_data_dir, output_dir=output_dir, masking_content=False)
    harry_team_output_dir = self.team_output_dir(output_dir, 'gryffindor')
    self.assertEqual(os.path.exists(os.path.join(harry_team_output_dir, 'avatars')), True)
    self.assertEqual(os.path.exists(os.path.join(harry_team_output_dir, 'emoji')), True)
    self.assertEqual(os.path.exists(os.path.join(harry_team_output_dir, 'attachment.json')), True)
    realm = self.read_file(harry_team_output_dir, 'realm.json')
    self.assertEqual('Organization imported from Mattermost!', realm['zerver_realm'][0]['description'])
    exported_user_ids = self.get_set(realm['zerver_userprofile'], 'id')
    exported_user_full_names = self.get_set(realm['zerver_userprofile'], 'full_name')
    self.assertEqual(set(['Harry Potter', 'Ron Weasley', 'Ginny Weasley', 'Tom Riddle']), exported_user_full_names)
    exported_user_emails = self.get_set(realm['zerver_userprofile'], 'email')
    self.assertEqual(set(['harry@zulip.com', 'ron@zulip.com', 'ginny@zulip.com', 'voldemort@zulip.com']), exported_user_emails)
    self.assertEqual(len(realm['zerver_stream']), 3)
    exported_stream_names = self.get_set(realm['zerver_stream'], 'name')
    self.assertEqual(exported_stream_names, set(['Gryffindor common room', 'Gryffindor quidditch team', 'Dumbledores army']))
    self.assertEqual(self.get_set(realm['zerver_stream'], 'realm'), set([realm['zerver_realm'][0]['id']]))
    self.assertEqual(self.get_set(realm['zerver_stream'], 'deactivated'), set([False]))
    self.assertEqual(len(realm['zerver_defaultstream']), 0)
    exported_recipient_ids = self.get_set(realm['zerver_recipient'], 'id')
    self.assertEqual(len(exported_recipient_ids), 8)
    exported_recipient_types = self.get_set(realm['zerver_recipient'], 'type')
    self.assertEqual(exported_recipient_types, set([1, 2, 3]))
    exported_recipient_type_ids = self.get_set(realm['zerver_recipient'], 'type_id')
    self.assertEqual(len(exported_recipient_type_ids), 4)
    exported_subscription_userprofile = self.get_set(realm['zerver_subscription'], 'user_profile')
    self.assertEqual(len(exported_subscription_userprofile), 4)
    exported_subscription_recipients = self.get_set(realm['zerver_subscription'], 'recipient')
    self.assertEqual(len(exported_subscription_recipients), 8)
    messages = self.read_file(harry_team_output_dir, 'messages-000001.json')
    exported_messages_id = self.get_set(messages['zerver_message'], 'id')
    self.assertIn(messages['zerver_message'][0]['sender'], exported_user_ids)
    self.assertIn(messages['zerver_message'][0]['recipient'], exported_recipient_ids)
    self.assertIn(messages['zerver_message'][0]['content'], 'ron joined the channel.\n\n')
    exported_usermessage_userprofiles = self.get_set(messages['zerver_usermessage'], 'user_profile')
    self.assertEqual(len(exported_usermessage_userprofiles), 3)
    exported_usermessage_messages = self.get_set(messages['zerver_usermessage'], 'message')
    self.assertEqual(exported_usermessage_messages, exported_messages_id)
    do_import_realm(import_dir=harry_team_output_dir, subdomain='gryffindor')
    realm = get_realm('gryffindor')
    messages = Message.objects.filter(sender__realm=realm)
    for message in messages:
        self.assertIsNotNone(message.rendered_content)
    self.assertEqual(len(messages), 11)
    stream_messages = messages.filter(recipient__type=Recipient.STREAM).order_by('pub_date')
    stream_recipients = stream_messages.values_list('recipient', flat=True)
    self.assertEqual(len(stream_messages), 4)
    self.assertEqual(len(set(stream_recipients)), 2)
    self.assertEqual(stream_messages[0].sender.email, 'ron@zulip.com')
    self.assertEqual(stream_messages[0].content, 'ron joined the channel.\n\n')
    huddle_messages = messages.filter(recipient__type=Recipient.HUDDLE).order_by('pub_date')
    huddle_recipients = huddle_messages.values_list('recipient', flat=True)
    self.assertEqual(len(huddle_messages), 3)
    self.assertEqual(len(set(huddle_recipients)), 1)
    self.assertEqual(huddle_messages[0].sender.email, 'ginny@zulip.com')
    self.assertEqual(huddle_messages[0].content, 'Who is going to Hogesmead this weekend?\n\n')
    personal_messages = messages.filter(recipient__type=Recipient.PERSONAL).order_by('pub_date')
    personal_recipients = personal_messages.values_list('recipient', flat=True)
    self.assertEqual(len(personal_messages), 4)
    self.assertEqual(len(set(personal_recipients)), 3)
    self.assertEqual(personal_messages[0].sender.email, 'ron@zulip.com')
    self.assertEqual(personal_messages[0].content, 'hey harry\n\n')
