

def cat(self, others=None, sep=None, na_rep=None, join=None):
    "\n        Concatenate strings in the Series/Index with given separator.\n\n        If `others` is specified, this function concatenates the Series/Index\n        and elements of `others` element-wise.\n        If `others` is not passed, then all values in the Series/Index are\n        concatenated into a single string with a given `sep`.\n\n        Parameters\n        ----------\n        others : Series, Index, DataFrame, np.ndarrary or list-like\n            Series, Index, DataFrame, np.ndarray (one- or two-dimensional) and\n            other list-likes of strings must have the same length as the\n            calling Series/Index, with the exception of indexed objects (i.e.\n            Series/Index/DataFrame) if `join` is not None.\n\n            If others is a list-like that contains a combination of Series,\n            np.ndarray (1-dim) or list-like, then all elements will be unpacked\n            and must satisfy the above criteria individually.\n\n            If others is None, the method returns the concatenation of all\n            strings in the calling Series/Index.\n        sep : string or None, default None\n            If None, concatenates without any separator.\n        na_rep : string or None, default None\n            Representation that is inserted for all missing values:\n\n            - If `na_rep` is None, and `others` is None, missing values in the\n              Series/Index are omitted from the result.\n            - If `na_rep` is None, and `others` is not None, a row containing a\n              missing value in any of the columns (before concatenation) will\n              have a missing value in the result.\n        join : {'left', 'right', 'outer', 'inner'}, default None\n            Determines the join-style between the calling Series/Index and any\n            Series/Index/DataFrame in `others` (objects without an index need\n            to match the length of the calling Series/Index). If None,\n            alignment is disabled, but this option will be removed in a future\n            version of pandas and replaced with a default of `'left'`. To\n            disable alignment, use `.values` on any Series/Index/DataFrame in\n            `others`.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        concat : str if `other is None`, Series/Index of objects if `others is\n            not None`. In the latter case, the result will remain categorical\n            if the calling Series/Index is categorical.\n\n        See Also\n        --------\n        split : Split each string in the Series/Index\n\n        Examples\n        --------\n        When not passing `others`, all values are concatenated into a single\n        string:\n\n        >>> s = pd.Series(['a', 'b', np.nan, 'd'])\n        >>> s.str.cat(sep=' ')\n        'a b d'\n\n        By default, NA values in the Series are ignored. Using `na_rep`, they\n        can be given a representation:\n\n        >>> s.str.cat(sep=' ', na_rep='?')\n        'a b ? d'\n\n        If `others` is specified, corresponding values are concatenated with\n        the separator. Result will be a Series of strings.\n\n        >>> s.str.cat(['A', 'B', 'C', 'D'], sep=',')\n        0    a,A\n        1    b,B\n        2    NaN\n        3    d,D\n        dtype: object\n\n        Missing values will remain missing in the result, but can again be\n        represented using `na_rep`\n\n        >>> s.str.cat(['A', 'B', 'C', 'D'], sep=',', na_rep='-')\n        0    a,A\n        1    b,B\n        2    -,C\n        3    d,D\n        dtype: object\n\n        If `sep` is not specified, the values are concatenated without\n        separation.\n\n        >>> s.str.cat(['A', 'B', 'C', 'D'], na_rep='-')\n        0    aA\n        1    bB\n        2    -C\n        3    dD\n        dtype: object\n\n        Series with different indexes can be aligned before concatenation. The\n        `join`-keyword works as in other methods.\n\n        >>> t = pd.Series(['d', 'a', 'e', 'c'], index=[3, 0, 4, 2])\n        >>> s.str.cat(t, join=None, na_rep='-')\n        0    ad\n        1    ba\n        2    -e\n        3    dc\n        dtype: object\n        >>>\n        >>> s.str.cat(t, join='left', na_rep='-')\n        0    aa\n        1    b-\n        2    -c\n        3    dd\n        dtype: object\n        >>>\n        >>> s.str.cat(t, join='outer', na_rep='-')\n        0    aa\n        1    b-\n        2    -c\n        3    dd\n        4    -e\n        dtype: object\n        >>>\n        >>> s.str.cat(t, join='inner', na_rep='-')\n        0    aa\n        2    -c\n        3    dd\n        dtype: object\n        >>>\n        >>> s.str.cat(t, join='right', na_rep='-')\n        3    dd\n        0    aa\n        4    -e\n        2    -c\n        dtype: object\n\n        For more examples, see :ref:`here <text.concatenate>`.\n        "
    from pandas import Index, Series, concat
    if isinstance(others, compat.string_types):
        raise ValueError('Did you mean to supply a `sep` keyword?')
    if isinstance(self._orig, Index):
        data = Series(self._orig, index=self._orig)
    else:
        data = self._orig
    if (others is None):
        result = str_cat(data, others=others, sep=sep, na_rep=na_rep)
        return self._wrap_result(result, use_codes=(not self._is_categorical))
    try:
        (others, warn) = self._get_series_list(others, ignore_index=(join is None))
    except ValueError:
        if (join is None):
            raise ValueError('All arrays must be same length, except those having an index if `join` is not None')
        else:
            raise ValueError('If `others` contains arrays or lists (or other list-likes without an index), these must all be of the same length as the calling Series/Index.')
    if ((join is None) and warn):
        warnings.warn("A future version of pandas will perform index alignment when `others` is a Series/Index/DataFrame (or a list-like containing one). To disable alignment (the behavior before v.0.23) and silence this warning, use `.values` on any Series/Index/DataFrame in `others`. To enable alignment and silence this warning, pass `join='left'|'outer'|'inner'|'right'`. The future default will be `join='left'`.", FutureWarning, stacklevel=2)
    if (join is not None):
        others = concat(others, axis=1, join=(join if (join == 'inner') else 'outer'), keys=range(len(others)))
        (data, others) = data.align(others, join=join)
        others = [others[x] for x in others]
    res = str_cat(data, others=others, sep=sep, na_rep=na_rep)
    if isinstance(self._orig, Index):
        res = Index(res, name=self._orig.name)
    else:
        res = Series(res, index=data.index, name=self._orig.name)
    return res
