

@staticmethod
def create(symbol, X, y=None, ctx=None, num_epoch=None, epoch_size=None, optimizer='sgd', initializer=Uniform(0.01), eval_data=None, eval_metric='acc', epoch_end_callback=None, batch_end_callback=None, kvstore='local', logger=None, work_load_list=None, eval_end_callback=LogValidationMetricsCallback(), eval_batch_end_callback=None, **kwargs):
    "Functional style to create a model.\n        This function is more consistent with functional\n        languages such as R, where mutation is not allowed.\n\n        Parameters\n        ----------\n        symbol : Symbol\n            The symbol configuration of a computation network.\n        X : DataIter\n            Training data.\n        y : numpy.ndarray, optional\n            If `X` is a ``numpy.ndarray``, `y` must be set.\n        ctx : Context or list of Context, optional\n            The device context of training and prediction.\n            To use multi-GPU training, pass in a list of GPU contexts.\n        num_epoch : int, optional\n            The number of training epochs(epochs).\n        epoch_size : int, optional\n            Number of batches in a epoch. In default, it is set to\n            ``ceil(num_train_examples / batch_size)``.\n        optimizer : str or Optimizer, optional\n            The name of the chosen optimizer, or an optimizer object, used for training.\n        initializer : initializer function, optional\n            The initialization scheme used.\n        eval_data : DataIter or numpy.ndarray pair\n            If `eval_set` is ``numpy.ndarray`` pair, it should\n            be (`valid_data`, `valid_label`).\n        eval_metric : metric.EvalMetric or str or callable\n            The evaluation metric. Can be the name of an evaluation metric\n            or a custom evaluation function that returns statistics\n            based on a minibatch.\n        epoch_end_callback : callable(epoch, symbol, arg_params, aux_states)\n            A callback that is invoked at end of each epoch.\n            This can be used to checkpoint model each epoch.\n        batch_end_callback: callable(epoch)\n            A callback that is invoked at end of each batch for print purposes.\n        kvstore: KVStore or str, optional\n           The KVStore or a string kvstore type: 'local', 'dist_sync', 'dis_async'.\n           Defaults to 'local', often no need to change for single machine.\n        logger : logging logger, optional\n            When not specified, default logger will be used.\n        work_load_list : list of float or int, optional\n            The list of work load for different devices,\n            in the same order as `ctx`.\n        "
    model = FeedForward(symbol, ctx=ctx, num_epoch=num_epoch, epoch_size=epoch_size, optimizer=optimizer, initializer=initializer, **kwargs)
    model.fit(X, y, eval_data=eval_data, eval_metric=eval_metric, epoch_end_callback=epoch_end_callback, batch_end_callback=batch_end_callback, kvstore=kvstore, logger=logger, work_load_list=work_load_list, eval_end_callback=eval_end_callback, eval_batch_end_callback=eval_batch_end_callback)
    return model
