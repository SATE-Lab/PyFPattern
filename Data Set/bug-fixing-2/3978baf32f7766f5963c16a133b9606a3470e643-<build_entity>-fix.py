

def build_entity(self):
    template = self.__get_template_with_version()
    disk_attachments = self.__get_storage_domain_and_all_template_disks(template)
    return otypes.Vm(id=self.param('id'), name=self.param('name'), cluster=(otypes.Cluster(name=self.param('cluster')) if self.param('cluster') else None), disk_attachments=disk_attachments, template=(otypes.Template(id=template.id) if template else None), use_latest_template_version=self.param('use_latest_template_version'), stateless=(self.param('stateless') or self.param('use_latest_template_version')), delete_protected=self.param('delete_protected'), high_availability=(otypes.HighAvailability(enabled=self.param('high_availability')) if (self.param('high_availability') is not None) else None), lease=(otypes.StorageDomainLease(storage_domain=otypes.StorageDomain(id=get_id_by_name(service=self._connection.system_service().storage_domains_service(), name=self.param('lease')))) if (self.param('lease') is not None) else None), cpu=(otypes.Cpu(topology=otypes.CpuTopology(cores=self.param('cpu_cores'), sockets=self.param('cpu_sockets'))) if (self.param('cpu_cores') or self.param('cpu_sockets')) else None), cpu_shares=self.param('cpu_shares'), os=(otypes.OperatingSystem(type=self.param('operating_system'), boot=(otypes.Boot(devices=[otypes.BootDevice(dev) for dev in self.param('boot_devices')]) if self.param('boot_devices') else None)) if (self.param('operating_system') or self.param('boot_devices')) else None), type=(otypes.VmType(self.param('type')) if self.param('type') else None), memory=(convert_to_bytes(self.param('memory')) if self.param('memory') else None), memory_policy=(otypes.MemoryPolicy(guaranteed=convert_to_bytes(self.param('memory_guaranteed'))) if self.param('memory_guaranteed') else None), instance_type=(otypes.InstanceType(id=get_id_by_name(self._connection.system_service().instance_types_service(), self.param('instance_type'))) if self.param('instance_type') else None), description=self.param('description'), comment=self.param('comment'), time_zone=(otypes.TimeZone(name=self.param('timezone')) if self.param('timezone') else None), serial_number=(otypes.SerialNumber(policy=otypes.SerialNumberPolicy(self.param('serial_policy')), value=self.param('serial_policy_value')) if ((self.param('serial_policy') is not None) or (self.param('serial_policy_value') is not None)) else None))
