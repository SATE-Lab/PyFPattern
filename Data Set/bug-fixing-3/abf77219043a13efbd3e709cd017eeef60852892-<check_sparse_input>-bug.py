def check_sparse_input(EstimatorClass, X, X_sparse, y):
    dense = EstimatorClass(n_estimators=10, random_state=0, max_depth=2).fit(X, y)
    sparse = EstimatorClass(n_estimators=10, random_state=0, max_depth=2, presort=False).fit(X_sparse, y)
    auto = EstimatorClass(n_estimators=10, random_state=0, max_depth=2, presort='auto').fit(X_sparse, y)
    assert_array_almost_equal(sparse.apply(X), dense.apply(X))
    assert_array_almost_equal(sparse.predict(X), dense.predict(X))
    assert_array_almost_equal(sparse.feature_importances_, dense.feature_importances_)
    assert_array_almost_equal(sparse.apply(X), auto.apply(X))
    assert_array_almost_equal(sparse.predict(X), auto.predict(X))
    assert_array_almost_equal(sparse.feature_importances_, auto.feature_importances_)
    assert_array_almost_equal(sparse.predict(X_sparse), dense.predict(X))
    assert_array_almost_equal(dense.predict(X_sparse), sparse.predict(X))
    if isinstance(EstimatorClass, GradientBoostingClassifier):
        assert_array_almost_equal(sparse.predict_proba(X), dense.predict_proba(X))
        assert_array_almost_equal(sparse.predict_log_proba(X), dense.predict_log_proba(X))
        assert_array_almost_equal(sparse.predict_proba(X), auto.predict_proba(X))
        assert_array_almost_equal(sparse.predict_log_proba(X), auto.predict_log_proba(X))
        assert_array_almost_equal(sparse.decision_function(X_sparse), sparse.decision_function(X))
        assert_array_almost_equal(dense.decision_function(X_sparse), sparse.decision_function(X))
        assert_array_almost_equal(np.array(sparse.staged_decision_function(X_sparse)), np.array(sparse.staged_decision_function(X)))