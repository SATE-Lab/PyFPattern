def test_solve_continuous_are():
    mat6 = np.load(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'data', 'carex_6_data.npz'))
    mat15 = np.load(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'data', 'carex_15_data.npz'))
    mat18 = np.load(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'data', 'carex_18_data.npz'))
    mat19 = np.load(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'data', 'carex_19_data.npz'))
    mat20 = np.load(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'data', 'carex_20_data.npz'))
    cases = [(np.diag([1.0], 1), np.array([[0], [1]]), block_diag(1.0, 2.0), 1, None), (np.array([[4, 3], [(- 4.5), (- 3.5)]]), np.array([[1], [(- 1)]]), np.array([[9, 6], [6, 4.0]]), 1, None), (np.array([[0, 1, 0, 0], [0, (- 1.89), 0.39, (- 5.53)], [0, (- 0.034), (- 2.98), 2.43], [0.034, (- 0.0011), (- 0.99), (- 0.21)]]), np.array([[0, 0], [0.36, (- 1.6)], [(- 0.95), (- 0.032)], [0.03, 0]]), np.array([[2.313, 2.727, 0.688, 0.023], [2.727, 4.271, 1.148, 0.323], [0.688, 1.148, 0.313, 0.102], [0.023, 0.323, 0.102, 0.083]]), np.eye(2), None), (np.array([[(- 0.991), 0.529, 0, 0, 0, 0, 0, 0], [0.522, (- 1.051), 0.596, 0, 0, 0, 0, 0], [0, 0.522, (- 1.118), 0.596, 0, 0, 0, 0], [0, 0, 0.522, (- 1.548), 0.718, 0, 0, 0], [0, 0, 0, 0.922, (- 1.64), 0.799, 0, 0], [0, 0, 0, 0, 0.922, (- 1.721), 0.901, 0], [0, 0, 0, 0, 0, 0.922, (- 1.823), 1.021], [0, 0, 0, 0, 0, 0, 0.922, (- 1.943)]]), (np.array([[3.84, 4.0, 37.6, 3.08, 2.36, 2.88, 3.08, 3.0], [(- 2.88), (- 3.04), (- 2.8), (- 2.32), (- 3.32), (- 3.82), (- 4.12), (- 3.96)]]).T * 0.001), np.array([[1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.1], [0.0, 1.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.5, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0], [0.0, 0.0, 0.5, 0.0, 0.0, 0.1, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0], [0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1]]), np.eye(2), None), (np.array([[(- 4.019), 5.12, 0.0, 0.0, (- 2.082), 0.0, 0.0, 0.0, 0.87], [(- 0.346), 0.986, 0.0, 0.0, (- 2.34), 0.0, 0.0, 0.0, 0.97], [(- 7.909), 15.407, (- 4.069), 0.0, (- 6.45), 0.0, 0.0, 0.0, 2.68], [(- 21.816), 35.606, (- 0.339), (- 3.87), (- 17.8), 0.0, 0.0, 0.0, 7.39], [(- 60.196), 98.188, (- 7.907), 0.34, (- 53.008), 0.0, 0.0, 0.0, 20.4], [0, 0, 0, 0, 94.0, (- 147.2), 0.0, 53.2, 0.0], [0, 0, 0, 0, 0, 94.0, (- 147.2), 0, 0], [0, 0, 0, 0, 0, 12.8, 0.0, (- 31.6), 0], [0, 0, 0, 0, 12.8, 0.0, 0.0, 18.8, (- 31.6)]]), np.array([[0.01, (- 0.011), (- 0.151)], [0.003, (- 0.021), 0.0], [0.009, (- 0.059), 0.0], [0.024, (- 0.162), 0.0], [0.068, (- 0.445), 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]), np.eye(9), np.eye(3), None), (mat6['A'], mat6['B'], mat6['Q'], mat6['R'], None), (np.array([[1, 0], [0, (- 2.0)]]), np.array([[1e-06], [0]]), np.ones((2, 2)), 1.0, 'Bad residual accuracy'), (block_diag((- 0.1), (- 0.02)), np.array([[0.1, 0.0], [0.001, 0.01]]), np.array([[100, 1000], [1000, 10000]]), (np.ones((2, 2)) + block_diag(1e-06, 0)), None), (np.array([[0, 1000000.0], [0, 0]]), np.array([[0], [1.0]]), np.eye(2), 1.0, None), (np.array([[1.0000001, 1], [1.0, 1.0000001]]), np.eye(2), np.eye(2), np.eye(2), None), (np.array([[3, 1.0], [4, 2]]), np.array([[1], [1]]), np.array([[(- 11), (- 5)], [(- 5), (- 2.0)]]), 1.0, None), ((np.array([[7000000.0, 2000000.0, (- 0.0)], [2000000.0, 6000000.0, (- 2000000.0)], [0.0, (- 2000000.0), 5000000.0]]) / 3), np.eye(3), (np.array([[1.0, (- 2.0), (- 2.0)], [(- 2.0), 1.0, (- 2.0)], [(- 2.0), (- 2.0), 1.0]]).dot(np.diag([1e-06, 1, 1000000.0])).dot(np.array([[1.0, (- 2.0), (- 2.0)], [(- 2.0), 1.0, (- 2.0)], [(- 2.0), (- 2.0), 1.0]])) / 9), (np.eye(3) * 1000000.0), 'Bad Residual Accuracy'), (np.array([[0, 0.4, 0, 0], [0, 0, 0.345, 0], [0, (- 524000.0), (- 465000.0), 262000.0], [0, 0, 0, (- 1000000.0)]]), np.array([[0, 0, 0, 1000000.0]]).T, np.diag([1, 0, 1, 0]), 1.0, None), (np.array([[(- 1e-06), 1, 0, 0], [(- 1), (- 1e-06), 0, 0], [0, 0, 1e-06, 1], [0, 0, (- 1), 1e-06]]), np.ones((4, 1)), np.ones((4, 4)), 1.0, None), (mat15['A'], mat15['B'], mat15['Q'], mat15['R'], None), ((((np.eye(64, 64, k=(- 1)) + (np.eye(64, 64) * (- 2.0))) + np.rot90(block_diag(1, np.zeros((62, 62)), 1))) + np.eye(64, 64, k=1)), np.eye(64), np.eye(64), np.eye(64), None), (np.diag(np.ones((20,)), 1), np.flipud(np.eye(21, 1)), (np.eye(21, 1) * np.eye(21, 1).T), 1, 'Bad Residual Accuracy'), (mat18['A'], mat18['B'], mat18['Q'], mat18['R'], None), (mat19['A'], mat19['B'], mat19['Q'], mat19['R'], 'Bad Residual Accuracy'), (mat20['A'], mat20['B'], mat20['Q'], mat20['R'], 'Bad Residual Accuracy')]
    min_decimal = (14, 12, 14, 14, 11, 7, None, 5, 7, 14, 14, None, 10, 14, 13, 14, None, 12, None, None)

    def _test_factory(case, dec):
        "Checks if 0 = XA + A'X - XB(R)^{-1} B'X + Q is true"
        (a, b, q, r, knownfailure) = case
        if knownfailure:
            raise KnownFailureTest(knownfailure)
        x = solve_continuous_are(a, b, q, r)
        res = ((x.dot(a) + a.conj().T.dot(x)) + q)
        out_fact = x.dot(b)
        res -= out_fact.dot(solve(np.atleast_2d(r), out_fact.conj().T))
        assert_array_almost_equal(res, np.zeros_like(res), decimal=dec)
    for (ind, case) in enumerate(cases):
        (yield (_test_factory, case, min_decimal[ind]))