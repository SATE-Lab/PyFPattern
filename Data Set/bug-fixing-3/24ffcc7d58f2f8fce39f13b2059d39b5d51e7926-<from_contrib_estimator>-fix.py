def from_contrib_estimator(estimator, prediction_input_fn, input_alternative_key=None, output_alternative_key=None, graph=None):
    'Constructs a `Predictor` from a `tf.contrib.learn.Estimator`.\n\n  Args:\n    estimator: an instance of `tf.contrib.learn.Estimator`.\n    prediction_input_fn: a function that takes no arguments and returns an\n      instance of `InputFnOps`.\n    input_alternative_key: Optional. Specify the input alternative used for\n      prediction.\n    output_alternative_key: Specify the output alternative used for\n      prediction. Not needed for single-headed models but required for\n      multi-headed models.\n    graph: Optional. The Tensorflow `graph` in which prediction should be\n      done.\n\n  Returns:\n    An initialized `Predictor`.\n\n  Raises:\n    TypeError: if `estimator` is a core `Estimator` instead of a contrib\n      `Estimator`.\n  '
    if isinstance(estimator, core_estimator.Estimator):
        raise TypeError('Expected estimator to be of type tf.contrib.learn.Estimator, but got type tf.python.estimator.Estimator. You likely want to call from_estimator.')
    return contrib_estimator_predictor.ContribEstimatorPredictor(estimator, prediction_input_fn, input_alternative_key=input_alternative_key, output_alternative_key=output_alternative_key, graph=graph)