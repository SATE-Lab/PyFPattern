def rescale_intensity(image, in_range='image', out_range='dtype'):
    "Return image after stretching or shrinking its intensity levels.\n\n    The desired intensity range of the input and output, `in_range` and\n    `out_range` respectively, are used to stretch or shrink the intensity range\n    of the input image. See examples below.\n\n    Parameters\n    ----------\n    image : array\n        Image array.\n    in_range, out_range : str or 2-tuple\n        Min and max intensity values of input and output image.\n        The possible values for this parameter are enumerated below.\n\n        'image'\n            Use image min/max as the intensity range.\n        'dtype'\n            Use min/max of the image's dtype as the intensity range.\n        dtype-name\n            Use intensity range based on desired `dtype`. Must be valid key\n            in `DTYPE_RANGE`.\n        2-tuple\n            Use `range_values` as explicit min/max intensities.\n\n    Returns\n    -------\n    out : array\n        Image array after rescaling its intensity. This image is the same dtype\n        as the input image.\n\n    See Also\n    --------\n    equalize_hist\n\n    Examples\n    --------\n    By default, the min/max intensities of the input image are stretched to\n    the limits allowed by the image's dtype, since `in_range` defaults to\n    'image' and `out_range` defaults to 'dtype':\n\n    >>> image = np.array([51, 102, 153], dtype=np.uint8)\n    >>> rescale_intensity(image)\n    array([  0, 127, 255], dtype=uint8)\n\n    It's easy to accidentally convert an image dtype from uint8 to float:\n\n    >>> 1.0 * image\n    array([  51.,  102.,  153.])\n\n    Use `rescale_intensity` to rescale to the proper range for float dtypes:\n\n    >>> image_float = 1.0 * image\n    >>> rescale_intensity(image_float)\n    array([ 0. ,  0.5,  1. ])\n\n    To maintain the low contrast of the original, use the `in_range` parameter:\n\n    >>> rescale_intensity(image_float, in_range=(0, 255))\n    array([ 0.2,  0.4,  0.6])\n\n    If the min/max value of `in_range` is more/less than the min/max image\n    intensity, then the intensity levels are clipped:\n\n    >>> rescale_intensity(image_float, in_range=(0, 102))\n    array([ 0.5,  1. ,  1. ])\n\n    If you have an image with signed integers but want to rescale the image to\n    just the positive range, use the `out_range` parameter:\n\n    >>> image = np.array([-10, 0, 10], dtype=np.int8)\n    >>> rescale_intensity(image, out_range=(0, 127))\n    array([  0,  63, 127], dtype=int8)\n\n    "
    dtype = image.dtype.type
    (imin, imax) = intensity_range(image, in_range)
    (omin, omax) = intensity_range(image, out_range, clip_negative=(imin >= 0))
    image = np.clip(image, imin, imax)
    image = ((image - imin) / float((imax - imin)))
    return np.array(((image * (omax - omin)) + omin), dtype=dtype)