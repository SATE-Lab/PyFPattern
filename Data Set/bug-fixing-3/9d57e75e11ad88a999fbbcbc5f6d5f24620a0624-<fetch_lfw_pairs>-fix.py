def fetch_lfw_pairs(subset='train', data_home=None, funneled=True, resize=0.5, color=False, slice_=(slice(70, 195), slice(78, 172)), download_if_missing=True):
    'Loader for the Labeled Faces in the Wild (LFW) pairs dataset\n\n    This dataset is a collection of JPEG pictures of famous people\n    collected on the internet, all details are available on the\n    official website:\n\n        http://vis-www.cs.umass.edu/lfw/\n\n    Each picture is centered on a single face. Each pixel of each channel\n    (color in RGB) is encoded by a float in range 0.0 - 1.0.\n\n    The task is called Face Verification: given a pair of two pictures,\n    a binary classifier must predict whether the two images are from\n    the same person.\n\n    In the official `README.txt`_ this task is described as the\n    "Restricted" task.  As I am not sure as to implement the\n    "Unrestricted" variant correctly, I left it as unsupported for now.\n\n      .. _`README.txt`: http://vis-www.cs.umass.edu/lfw/README.txt\n\n    The original images are 250 x 250 pixels, but the default slice and resize\n    arguments reduce them to 62 x 47.\n\n    Read more in the :ref:`User Guide <labeled_faces_in_the_wild>`.\n\n    Parameters\n    ----------\n    subset : optional, default: \'train\'\n        Select the dataset to load: \'train\' for the development training\n        set, \'test\' for the development test set, and \'10_folds\' for the\n        official evaluation set that is meant to be used with a 10-folds\n        cross validation.\n\n    data_home : optional, default: None\n        Specify another download and cache folder for the datasets. By\n        default all scikit learn data is stored in \'~/scikit_learn_data\'\n        subfolders.\n\n    funneled : boolean, optional, default: True\n        Download and use the funneled variant of the dataset.\n\n    resize : float, optional, default 0.5\n        Ratio used to resize the each face picture.\n\n    color : boolean, optional, default False\n        Keep the 3 RGB channels instead of averaging them to a single\n        gray level channel. If color is True the shape of the data has\n        one more dimension than the shape with color = False.\n\n    slice_ : optional\n        Provide a custom 2D slice (height, width) to extract the\n        \'interesting\' part of the jpeg files and avoid use statistical\n        correlation from the background\n\n    download_if_missing : optional, True by default\n        If False, raise a IOError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    Returns\n    -------\n    The data is returned as a Bunch object with the following attributes:\n\n    data : numpy array of shape (2200, 5828). Shape depends on ``subset``.\n        Each row corresponds to 2 ravel\'d face images of original size 62 x 47\n        pixels. Changing the ``slice_``, ``resize`` or ``subset`` parameters\n        will change the shape of the output.\n\n    pairs : numpy array of shape (2200, 2, 62, 47). Shape depends on\n            ``subset``.\n        Each row has 2 face images corresponding to same or different person\n        from the dataset containing 5749 people. Changing the ``slice_``,\n        ``resize`` or ``subset`` parameters will change the shape of the\n        output.\n\n    target : numpy array of shape (2200,). Shape depends on ``subset``.\n        Labels associated to each pair of images. The two label values being\n        different persons or the same person.\n\n    DESCR : string\n        Description of the Labeled Faces in the Wild (LFW) dataset.\n\n    '
    (lfw_home, data_folder_path) = check_fetch_lfw(data_home=data_home, funneled=funneled, download_if_missing=download_if_missing)
    logger.info('Loading %s LFW pairs from %s', subset, lfw_home)
    m = Memory(cachedir=lfw_home, compress=6, verbose=0)
    load_func = m.cache(_fetch_lfw_pairs)
    label_filenames = {
        'train': 'pairsDevTrain.txt',
        'test': 'pairsDevTest.txt',
        '10_folds': 'pairs.txt',
    }
    if (subset not in label_filenames):
        raise ValueError(("subset='%s' is invalid: should be one of %r" % (subset, list(sorted(label_filenames.keys())))))
    index_file_path = join(lfw_home, label_filenames[subset])
    (pairs, target, target_names) = load_func(index_file_path, data_folder_path, resize=resize, color=color, slice_=slice_)
    return Bunch(data=pairs.reshape(len(pairs), (- 1)), pairs=pairs, target=target, target_names=target_names, DESCR=("'%s' segment of the LFW pairs dataset" % subset))