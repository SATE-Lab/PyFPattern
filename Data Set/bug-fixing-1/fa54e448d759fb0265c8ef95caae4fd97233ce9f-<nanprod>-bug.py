

def nanprod(a, axis=None, dtype=None, out=None, keepdims=np._NoValue):
    '\n    Return the product of array elements over a given axis treating Not a\n    Numbers (NaNs) as ones.\n\n    One is returned for slices that are all-NaN or empty.\n\n    .. versionadded:: 1.10.0\n\n    Parameters\n    ----------\n    a : array_like\n        Array containing numbers whose sum is desired. If `a` is not an\n        array, a conversion is attempted.\n    axis : int, optional\n        Axis along which the product is computed. The default is to compute\n        the product of the flattened array.\n    dtype : data-type, optional\n        The type of the returned array and of the accumulator in which the\n        elements are summed.  By default, the dtype of `a` is used.  An\n        exception is when `a` has an integer type with less precision than\n        the platform (u)intp. In that case, the default will be either\n        (u)int32 or (u)int64 depending on whether the platform is 32 or 64\n        bits. For inexact inputs, dtype must be inexact.\n    out : ndarray, optional\n        Alternate output array in which to place the result.  The default\n        is ``None``. If provided, it must have the same shape as the\n        expected output, but the type will be cast if necessary.  See\n        `doc.ufuncs` for details. The casting of NaN to integer can yield\n        unexpected results.\n    keepdims : bool, optional\n        If True, the axes which are reduced are left in the result as\n        dimensions with size one. With this option, the result will\n        broadcast correctly against the original `arr`.\n\n    Returns\n    -------\n    nanprod : ndarray\n        A new array holding the result is returned unless `out` is\n        specified, in which case it is returned.\n\n    See Also\n    --------\n    numpy.prod : Product across array propagating NaNs.\n    isnan : Show which elements are NaN.\n\n    Examples\n    --------\n    >>> np.nanprod(1)\n    1\n    >>> np.nanprod([1])\n    1\n    >>> np.nanprod([1, np.nan])\n    1.0\n    >>> a = np.array([[1, 2], [3, np.nan]])\n    >>> np.nanprod(a)\n    6.0\n    >>> np.nanprod(a, axis=0)\n    array([ 3.,  2.])\n\n    '
    (a, mask) = _replace_nan(a, 1)
    return np.prod(a, axis=axis, dtype=dtype, out=out, keepdims=keepdims)
