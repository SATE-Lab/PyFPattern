

def precision_recall_curve(y_true, probas_pred, pos_label=None, sample_weight=None):
    'Compute precision-recall pairs for different probability thresholds\n\n    Note: this implementation is restricted to the binary classification task.\n\n    The precision is the ratio ``tp / (tp + fp)`` where ``tp`` is the number of\n    true positives and ``fp`` the number of false positives. The precision is\n    intuitively the ability of the classifier not to label as positive a sample\n    that is negative.\n\n    The recall is the ratio ``tp / (tp + fn)`` where ``tp`` is the number of\n    true positives and ``fn`` the number of false negatives. The recall is\n    intuitively the ability of the classifier to find all the positive samples.\n\n    The last precision and recall values are 1. and 0. respectively and do not\n    have a corresponding threshold.  This ensures that the graph starts on the\n    x axis.\n\n    Read more in the :ref:`User Guide <precision_recall_f_measure_metrics>`.\n\n    Parameters\n    ----------\n    y_true : array, shape = [n_samples]\n        True targets of binary classification in range {-1, 1} or {0, 1}.\n\n    probas_pred : array, shape = [n_samples]\n        Estimated probabilities or decision function.\n\n    pos_label : int or str, default=None\n        The label of the positive class\n\n    sample_weight : array-like of shape = [n_samples], optional\n        Sample weights.\n\n    Returns\n    -------\n    precision : array, shape = [n_thresholds + 1]\n        Precision values such that element i is the precision of\n        predictions with score >= thresholds[i] and the last element is 1.\n\n    recall : array, shape = [n_thresholds + 1]\n        Decreasing recall values such that element i is the recall of\n        predictions with score >= thresholds[i] and the last element is 0.\n\n    thresholds : array, shape = [n_thresholds <= len(np.unique(probas_pred))]\n        Increasing thresholds on the decision function used to compute\n        precision and recall.\n\n    See also\n    --------\n    average_precision_score : Compute average precision from prediction scores\n\n    roc_curve : Compute Receiver operating characteristic (ROC) curve\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.metrics import precision_recall_curve\n    >>> y_true = np.array([0, 0, 1, 1])\n    >>> y_scores = np.array([0.1, 0.4, 0.35, 0.8])\n    >>> precision, recall, thresholds = precision_recall_curve(\n    ...     y_true, y_scores)\n    >>> precision  # doctest: +ELLIPSIS\n    array([ 0.66...,  0.5       ,  1.        ,  1.        ])\n    >>> recall\n    array([ 1. ,  0.5,  0.5,  0. ])\n    >>> thresholds\n    array([ 0.35,  0.4 ,  0.8 ])\n\n    '
    (fps, tps, thresholds) = _binary_clf_curve(y_true, probas_pred, pos_label=pos_label, sample_weight=sample_weight)
    precision = (tps / (tps + fps))
    recall = (tps / tps[(- 1)])
    last_ind = tps.searchsorted(tps[(- 1)])
    sl = slice(last_ind, None, (- 1))
    return (np.r_[(precision[sl], 1)], np.r_[(recall[sl], 0)], thresholds[sl])
