

def edit_distance(hypothesis, truth, normalize=True, name='edit_distance'):
    'Computes the Levenshtein distance between sequences.\n\n  This operation takes variable-length sequences (`hypothesis` and `truth`),\n  each provided as a `SparseTensor`, and computes the Levenshtein distance.\n  You can normalize the edit distance by length of `truth` by setting\n  `normalize` to true.\n\n  For example, given the following input:\n\n  ```python\n  # \'hypothesis\' is a tensor of shape `[2, 1]` with variable-length values:\n  #   (0,0) = ["a"]\n  #   (1,0) = ["b"]\n  hypothesis = tf.SparseTensor(\n      [[0, 0, 0],\n       [1, 0, 0]],\n      ["a", "b"],\n      (2, 1, 1))\n\n  # \'truth\' is a tensor of shape `[2, 2]` with variable-length values:\n  #   (0,0) = []\n  #   (0,1) = ["a"]\n  #   (1,0) = ["b", "c"]\n  #   (1,1) = ["a"]\n  truth = tf.SparseTensor(\n      [[0, 1, 0],\n       [1, 0, 0],\n       [1, 0, 1],\n       [1, 1, 0]],\n      ["a", "b", "c", "a"],\n      (2, 2, 2))\n\n  normalize = True\n  ```\n\n  This operation would return the following:\n\n  ```python\n  # \'output\' is a tensor of shape `[2, 2]` with edit distances normalized\n  # by \'truth\' lengths.\n  output ==> [[inf, 1.0],  # (0,0): no truth, (0,1): no hypothesis\n             [0.5, 1.0]]  # (1,0): addition, (1,1): no hypothesis\n  ```\n\n  Args:\n    hypothesis: A `SparseTensor` containing hypothesis sequences.\n    truth: A `SparseTensor` containing truth sequences.\n    normalize: A `bool`. If `True`, normalizes the Levenshtein distance by\n      length of `truth.`\n    name: A name for the operation (optional).\n\n  Returns:\n    A dense `Tensor` with rank `R - 1`, where R is the rank of the\n    `SparseTensor` inputs `hypothesis` and `truth`.\n\n  Raises:\n    TypeError: If either `hypothesis` or `truth` are not a `SparseTensor`.\n  '
    if (not isinstance(hypothesis, (sparse_tensor.SparseTensor, sparse_tensor.SparseTensorValue))):
        raise TypeError('Hypothesis must be a SparseTensor.')
    if (not isinstance(truth, (sparse_tensor.SparseTensor, sparse_tensor.SparseTensorValue))):
        raise TypeError('Truth must be a SparseTensor.')
    return gen_array_ops._edit_distance(hypothesis.indices, hypothesis.values, hypothesis.dense_shape, truth.indices, truth.values, truth.dense_shape, normalize=normalize, name=name)
