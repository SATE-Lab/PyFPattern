

def savgol_filter(x, window_length, polyorder, deriv=0, delta=1.0, axis=(- 1), mode='interp', cval=0.0):
    " Apply a Savitzky-Golay filter to an array.\n\n    This is a 1-d filter.  If `x`  has dimension greater than 1, `axis`\n    determines the axis along which the filter is applied.\n\n    Parameters\n    ----------\n    x : array_like\n        The data to be filtered.  If `x` is not a single or double precision\n        floating point array, it will be converted to type `numpy.float64`\n        before filtering.\n    window_length : int\n        The length of the filter window (i.e. the number of coefficients).\n        `window_length` must be a positive odd integer. If `mode` is 'interp',\n        `window_length` must be less than or equal to the size of `x`.\n    polyorder : int\n        The order of the polynomial used to fit the samples.\n        `polyorder` must be less than `window_length`.\n    deriv : int, optional\n        The order of the derivative to compute.  This must be a\n        nonnegative integer.  The default is 0, which means to filter\n        the data without differentiating.\n    delta : float, optional\n        The spacing of the samples to which the filter will be applied.\n        This is only used if deriv > 0.  Default is 1.0.\n    axis : int, optional\n        The axis of the array `x` along which the filter is to be applied.\n        Default is -1.\n    mode : str, optional\n        Must be 'mirror', 'constant', 'nearest', 'wrap' or 'interp'.  This\n        determines the type of extension to use for the padded signal to\n        which the filter is applied.  When `mode` is 'constant', the padding\n        value is given by `cval`.  See the Notes for more details on 'mirror',\n        'constant', 'wrap', and 'nearest'.\n        When the 'interp' mode is selected (the default), no extension\n        is used.  Instead, a degree `polyorder` polynomial is fit to the\n        last `window_length` values of the edges, and this polynomial is\n        used to evaluate the last `window_length // 2` output values.\n    cval : scalar, optional\n        Value to fill past the edges of the input if `mode` is 'constant'.\n        Default is 0.0.\n\n    Returns\n    -------\n    y : ndarray, same shape as `x`\n        The filtered data.\n\n    See Also\n    --------\n    savgol_coeffs\n\n    Notes\n    -----\n    Details on the `mode` options:\n\n        'mirror':\n            Repeats the values at the edges in reverse order.  The value\n            closest to the edge is not included.\n        'nearest':\n            The extension contains the nearest input value.\n        'constant':\n            The extension contains the value given by the `cval` argument.\n        'wrap':\n            The extension contains the values from the other end of the array.\n\n    For example, if the input is [1, 2, 3, 4, 5, 6, 7, 8], and\n    `window_length` is 7, the following shows the extended data for\n    the various `mode` options (assuming `cval` is 0)::\n\n        mode       |   Ext   |         Input          |   Ext\n        -----------+---------+------------------------+---------\n        'mirror'   | 4  3  2 | 1  2  3  4  5  6  7  8 | 7  6  5\n        'nearest'  | 1  1  1 | 1  2  3  4  5  6  7  8 | 8  8  8\n        'constant' | 0  0  0 | 1  2  3  4  5  6  7  8 | 0  0  0\n        'wrap'     | 6  7  8 | 1  2  3  4  5  6  7  8 | 1  2  3\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> from scipy.signal import savgol_filter\n    >>> np.set_printoptions(precision=2)  # For compact display.\n    >>> x = np.array([2, 2, 5, 2, 1, 0, 1, 4, 9])\n\n    Filter with a window length of 5 and a degree 2 polynomial.  Use\n    the defaults for all other parameters.\n\n    >>> savgol_filter(x, 5, 2)\n    array([ 1.66,  3.17,  3.54,  2.86,  0.66,  0.17,  1.  ,  4.  ,  9.  ])\n\n    Note that the last five values in x are samples of a parabola, so\n    when mode='interp' (the default) is used with polyorder=2, the last\n    three values are unchanged.  Compare that to, for example,\n    `mode='nearest'`:\n\n    >>> savgol_filter(x, 5, 2, mode='nearest')\n    array([ 1.74,  3.03,  3.54,  2.86,  0.66,  0.17,  1.  ,  4.6 ,  7.97])\n\n    "
    if (mode not in ['mirror', 'constant', 'nearest', 'interp', 'wrap']):
        raise ValueError("mode must be 'mirror', 'constant', 'nearest' 'wrap' or 'interp'.")
    x = np.asarray(x)
    if ((x.dtype != np.float64) and (x.dtype != np.float32)):
        x = x.astype(np.float64)
    coeffs = savgol_coeffs(window_length, polyorder, deriv=deriv, delta=delta)
    if (mode == 'interp'):
        if (window_length > x.size):
            raise ValueError("If mode is 'interp', window_length must be less than or equal to the size of x.")
        y = convolve1d(x, coeffs, axis=axis, mode='constant')
        _fit_edges_polyfit(x, window_length, polyorder, deriv, delta, axis, y)
    else:
        y = convolve1d(x, coeffs, axis=axis, mode=mode, cval=cval)
    return y
