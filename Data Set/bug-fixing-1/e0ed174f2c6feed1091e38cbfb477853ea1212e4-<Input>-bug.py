

def Input(shape=None, batch_shape=None, name=None, dtype=K.floatx()):
    "`Input()` is used to instantiate a Keras tensor.\n    A Keras tensor is a tensor object from the underlying backend\n    (Theano or TensorFlow), which we augment with certain\n    attributes that allow us to build a Keras model\n    just by knowing the inputs and outputs of the model.\n\n    For instance, if a, b and c and Keras tensors,\n    it becomes possible to do:\n    `model = Model(input=[a, b], output=c)`\n\n    The added Keras attributes are:\n        ._keras_shape: integer shape tuple propagated\n            via Keras-side shape inference.\n        ._keras_history: last layer applied to the tensor.\n            the entire layer graph is retrievable from that layer,\n            recursively.\n\n    # Arguments\n        shape: a shape tuple (integer), not including the batch size.\n            For instance, `shape=(32,)` indicates that the expected input\n            will be batches of 32-dimensional vectors.\n        batch_shape: a shape tuple (integer), including the batch size.\n            For instance, `batch_shape=(10, 32)` indicates that\n            the expected input will be batches of 10 32-dimensional vectors.\n            `batch_shape=(None, 32)` indicates batches of an arbitrary number\n            of 32-dimensional vectors.\n        name: An optional name string for the layer.\n            Should be unique in a model (do not reuse the same name twice).\n            It will be autogenerated if it isn't provided.\n        dtype: The data type expected by the input, as a string\n            (`float32`, `flaot64`, `int32`...)\n\n    # Example usage\n\n        ```python\n        # this is a logistic regression in Keras\n        a = Input(shape=(32,))\n        b = Dense(16, activation='softmax')(a)\n        model = Model(input=a, output=b)\n        ```\n    "
    if (not batch_shape):
        assert shape, (('Please provide to Input either an `input_shape`' + ' or `batch_input_shape` argument. Note that ') + '`input_shape` does not include the batch dimension.')
        batch_shape = ((None,) + tuple(shape))
    input_layer = InputLayer(batch_input_shape=batch_shape, name=name, input_dtype=dtype)
    outputs = input_layer.inbound_nodes[0].output_tensors
    if (len(outputs) == 1):
        return outputs[0]
    else:
        return outputs
