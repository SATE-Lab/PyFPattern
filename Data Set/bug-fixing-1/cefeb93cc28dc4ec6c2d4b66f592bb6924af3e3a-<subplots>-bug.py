

def subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw):
    "\n    Create a figure and a set of subplots\n\n    This utility wrapper makes it convenient to create common layouts of\n    subplots, including the enclosing figure object, in a single call.\n\n    Parameters\n    ----------\n    nrows, ncols : int, optional, default: 1\n        Number of rows/columns of the subplot grid.\n\n    sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False\n        Controls sharing of properties among x (`sharex`) or y (`sharey`)\n        axes:\n\n            - True or 'all': x- or y-axis will be shared among all\n              subplots.\n            - False or 'none': each subplot x- or y-axis will be\n              independent.\n            - 'row': each subplot row will share an x- or y-axis.\n            - 'col': each subplot column will share an x- or y-axis.\n\n        When subplots have a shared x-axis along a column, only the x tick\n        labels of the bottom subplot are visible.  Similarly, when subplots\n        have a shared y-axis along a row, only the y tick labels of the first\n        column subplot are visible.\n\n    squeeze : bool, optional, default: True\n        - If True, extra dimensions are squeezed out from the returned Axes\n          object:\n\n            - if only one subplot is constructed (nrows=ncols=1), the\n              resulting single Axes object is returned as a scalar.\n            - for Nx1 or 1xN subplots, the returned object is a 1D numpy\n              object array of Axes objects are returned as numpy 1D arrays.\n            - for NxM, subplots with N>1 and M>1 are returned as a 2D arrays.\n\n        - If False, no squeezing at all is done: the returned Axes object is\n          always a 2D array containing Axes instances, even if it ends up\n          being 1x1.\n\n    subplot_kw : dict, optional\n        Dict with keywords passed to the\n        :meth:`~matplotlib.figure.Figure.add_subplot` call used to create each\n        subplot.\n\n    gridspec_kw : dict, optional\n        Dict with keywords passed to the\n        :class:`~matplotlib.gridspec.GridSpec` constructor used to create the\n        grid the subplots are placed on.\n\n    fig_kw : dict, optional\n        Dict with keywords passed to the :func:`figure` call.  Note that all\n        keywords not recognized above will be automatically included here.\n\n    Returns\n    -------\n    fig : :class:`matplotlib.figure.Figure` object\n\n    ax : Axes object or array of Axes objects.\n\n        ax can be either a single :class:`matplotlib.axes.Axes` object or an\n        array of Axes objects if more than one subplot was created.  The\n        dimensions of the resulting array can be controlled with the squeeze\n        keyword, see above.\n\n    Examples\n    --------\n    First create some toy data:\n\n    >>> x = np.linspace(0, 2*np.pi, 400)\n    >>> y = np.sin(x**2)\n\n    Creates just a figure and only one subplot\n\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(x, y)\n    >>> ax.set_title('Simple plot')\n\n    Creates two subplots and unpacks the output array immediately\n\n    >>> f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\n    >>> ax1.plot(x, y)\n    >>> ax1.set_title('Sharing Y axis')\n    >>> ax2.scatter(x, y)\n\n    Creates four polar axes, and accesses them through the returned array\n\n    >>> fig, axes = plt.subplots(2, 2, subplot_kw=dict(polar=True))\n    >>> axes[0, 0].plot(x, y)\n    >>> axes[1, 1].scatter(x, y)\n\n    Share a X axis with each column of subplots\n\n    >>> plt.subplots(2, 2, sharex='col')\n\n    Share a Y axis with each row of subplots\n\n    >>> plt.subplots(2, 2, sharey='row')\n\n    Share both X and Y axes with all subplots\n\n    >>> plt.subplots(2, 2, sharex='all', sharey='all')\n\n    Note that this is the same as\n\n    >>> plt.subplots(2, 2, sharex=True, sharey=True)\n\n    See Also\n    --------\n    figure\n    subplot\n    "
    fig = figure(**fig_kw)
    axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey, squeeze=squeeze, subplot_kw=subplot_kw, gridspec_kw=gridspec_kw)
    return (fig, axs)
