def push(self, key, value, priority=0):
    ' Pushes a single or a sequence of key-value pairs into the store.\n\n        This function returns immediately after adding an operator to the engine.\n        The actual operation is executed asynchronously after all previous `push`\n        and `pull` calls for the same input key(s) are finished.\n        There is no synchronization between workers. One can use ``_barrier()``\n        to sync all workers.\n\n        Parameters\n        ----------\n        key : int or list of int\n            Keys\n\n        value : NDArray or list of NDArray or list of list of NDArray\n            Values corresponding to the Keys\n\n        priority : int, optional\n            The priority of the push operation.\n            Higher priority push operations are likely to be executed before\n            other push actions\n\n        Examples\n        --------\n        >>> # push a single key-value pair\n        >>> kv.push(3, mx.nd.ones(shape)*8)\n        >>> kv.pull(3, out=a) # pull out the value\n        >>> print a.asnumpy()\n        [[ 8.  8.  8.]\n        [ 8.  8.  8.]]\n\n        >>> # aggregate the value and the push\n        >>> gpus = [mx.gpu(i) for i in range(4)]\n        >>> b = [mx.nd.ones(shape, gpu) for gpu in gpus]\n        >>> kv.push(3, b)\n        >>> kv.pull(3, out=a)\n        >>> print a.asnumpy()\n        [[ 4.  4.  4.]\n        [ 4.  4.  4.]]\n\n        >>> # push a list of keys.\n        >>> # single device\n        >>> kv.push(keys, [mx.nd.ones(shape)]*len(keys))\n        >>> b = [mx.nd.zeros(shape)]*len(keys)\n        >>> kv.pull(keys, out=b)\n        >>> print b[1].asnumpy()\n        [[ 1.  1.  1.]\n        [ 1.  1.  1.]]\n\n        >>> # multiple devices:\n        >>> b = [[mx.nd.ones(shape, gpu) for gpu in gpus]] * len(keys)\n        >>> kv.push(keys, b)\n        >>> kv.pull(keys, out=b)\n        >>> print b[1][1].asnumpy()\n        [[ 4.  4.  4.]\n        [ 4.  4.  4.]]\n        '
    (ckeys, cvals) = _ctype_key_value(key, value)
    check_call(_LIB.MXKVStorePush(self.handle, mx_uint(len(ckeys)), ckeys, cvals, ctypes.c_int(priority)))