@classmethod
def from_breaks(cls, breaks, closed='right', name=None, copy=False, dtype=None):
    "\n        Construct an IntervalIndex from an array of splits\n\n        Parameters\n        ----------\n        breaks : array-like (1-dimensional)\n            Left and right bounds for each interval.\n        closed : {'left', 'right', 'both', 'neither'}, default 'right'\n            Whether the intervals are closed on the left-side, right-side, both\n            or neither.\n        name : object, optional\n            Name to be stored in the index.\n        copy : boolean, default False\n            copy the data\n        dtype : dtype or None, default None\n            If None, dtype will be inferred\n\n            ..versionadded:: 0.23.0\n\n        Examples\n        --------\n        >>> pd.IntervalIndex.from_breaks([0, 1, 2, 3])\n        IntervalIndex([(0, 1], (1, 2], (2, 3]]\n                      closed='right',\n                      dtype='interval[int64]')\n\n        See Also\n        --------\n        interval_range : Function to create a fixed frequency IntervalIndex\n        IntervalIndex.from_arrays : Construct an IntervalIndex from a left and\n                                    right array\n        IntervalIndex.from_tuples : Construct an IntervalIndex from a\n                                    list/array of tuples\n        "
    breaks = maybe_convert_platform_interval(breaks)
    return cls.from_arrays(breaks[:(- 1)], breaks[1:], closed, name=name, copy=copy, dtype=dtype)