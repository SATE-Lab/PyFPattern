def apply(self, fn):
    'Applies ``fn`` recursively to every submodule (as returned by ``.children()``)\n        as well as self. Typical use includes initializing the parameters of a model\n        (see also :ref:`torch-nn-init`).\n\n        Args:\n            fn (:class:`Module` -> None): function to be applied to each submodule\n\n        Returns:\n            Module: self\n\n        Example:\n            >>> def init_weights(m):\n                    print(m)\n                    if type(m) == nn.Linear:\n                        m.weight.data.fill_(1.0)\n                        print(m.weight)\n\n            >>> net = nn.Sequential(nn.Linear(2, 2), nn.Linear(2, 2))\n            >>> net.apply(init_weights)\n            Linear(in_features=2, out_features=2, bias=True)\n\n             1  1\n             1  1\n            [torch.FloatTensor of size (2,2)]\n\n            Linear(in_features=2, out_features=2, bias=True)\n\n             1  1\n             1  1\n            [torch.FloatTensor of size (2,2)]\n\n            Sequential(\n              (0): Linear(in_features=2, out_features=2, bias=True)\n              (1): Linear(in_features=2, out_features=2, bias=True)\n            )\n            Sequential(\n              (0): Linear(in_features=2, out_features=2, bias=True)\n              (1): Linear(in_features=2, out_features=2, bias=True)\n            )\n        '
    for module in self.children():
        module.apply(fn)
    fn(self)
    return self