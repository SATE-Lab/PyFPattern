def infer_shape_partial(self, *args, **kwargs):
    "Infers the shape partially. This functions works the same way as `infer_shape`,\n        except that this function can return partial results.\n\n        In the following example, information about fc2 is not available. So, `infer_shape`\n        will return a tuple of `None` values but `infer_shape_partial` will return partial values.\n\n        Example usage:\n        ----------\n        >>> data = mx.sym.Variable('data')\n        >>> prev = mx.sym.Variable('prev')\n        >>> fc1  = mx.sym.FullyConnected(data=data, name='fc1', num_hidden=128)\n        >>> fc2  = mx.sym.FullyConnected(data=prev, name='fc2', num_hidden=128)\n        >>> out  = mx.sym.Activation(data=mx.sym.elemwise_add(fc1, fc2), act_type='relu')\n        >>> out.list_arguments()\n        ['data', 'fc1_weight', 'fc1_bias', 'prev', 'fc2_weight', 'fc2_bias']\n        >>> out.infer_shape(data=(10,64))\n        (None, None, None)\n        >>> out.infer_shape_partial(data=(10,64))\n        ([(10L, 64L), (128L, 64L), (128L,), (), (), ()], [(10L, 128L)], [])\n        >>> # infers shape if you give information about fc2\n        >>> out.infer_shape(data=(10,64), prev=(10,128))\n        ([(10L, 64L), (128L, 64L), (128L,), (10L, 128L), (128L, 128L), (128L,)], [(10L, 128L)], [])\n\n        Parameters\n        ----------\n        *args :\n            Shape of arguments in a positional way.\n            Unknown shape can be marked as None\n\n        **kwargs :\n            Keyword arguments of known shapes.\n\n        Returns\n        -------\n        arg_shapes : list of tuple or None\n            List of argument shapes.\n            The order is same as the order of list_arguments().\n        out_shapes : list of tuple or None\n            List of output shapes.\n            The order is same as the order of list_outputs().\n        aux_shapes : list of tuple or None\n            List of auxiliary state shapes.\n            The order is same as the order of list_auxiliary_states().\n        "
    return self._infer_shape_impl(True, *args, **kwargs)