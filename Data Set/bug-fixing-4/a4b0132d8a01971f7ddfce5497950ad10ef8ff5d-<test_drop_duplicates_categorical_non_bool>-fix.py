@pytest.mark.parametrize('dtype', ['int_', 'uint', 'float_', 'unicode_', 'timedelta64[h]', 'datetime64[D]'])
def test_drop_duplicates_categorical_non_bool(self, dtype, ordered_fixture):
    cat_array = np.array([1, 2, 3, 4, 5], dtype=np.dtype(dtype))
    input1 = np.array([1, 2, 3, 3], dtype=np.dtype(dtype))
    tc1 = Series(Categorical(input1, categories=cat_array, ordered=ordered_fixture))
    if (dtype == 'datetime64[D]'):
        if (not (np.array(tc1) == input1).all()):
            pytest.xfail(reason='GH#7996')
    expected = Series([False, False, False, True])
    tm.assert_series_equal(tc1.duplicated(), expected)
    tm.assert_series_equal(tc1.drop_duplicates(), tc1[(~ expected)])
    sc = tc1.copy()
    sc.drop_duplicates(inplace=True)
    tm.assert_series_equal(sc, tc1[(~ expected)])
    expected = Series([False, False, True, False])
    tm.assert_series_equal(tc1.duplicated(keep='last'), expected)
    tm.assert_series_equal(tc1.drop_duplicates(keep='last'), tc1[(~ expected)])
    sc = tc1.copy()
    sc.drop_duplicates(keep='last', inplace=True)
    tm.assert_series_equal(sc, tc1[(~ expected)])
    expected = Series([False, False, True, True])
    tm.assert_series_equal(tc1.duplicated(keep=False), expected)
    tm.assert_series_equal(tc1.drop_duplicates(keep=False), tc1[(~ expected)])
    sc = tc1.copy()
    sc.drop_duplicates(keep=False, inplace=True)
    tm.assert_series_equal(sc, tc1[(~ expected)])
    input2 = np.array([1, 2, 3, 5, 3, 2, 4], dtype=np.dtype(dtype))
    tc2 = Series(Categorical(input2, categories=cat_array, ordered=ordered_fixture))
    if (dtype == 'datetime64[D]'):
        if (not (np.array(tc2) == input2).all()):
            pytest.xfail(reason='GH#7996')
    expected = Series([False, False, False, False, True, True, False])
    tm.assert_series_equal(tc2.duplicated(), expected)
    tm.assert_series_equal(tc2.drop_duplicates(), tc2[(~ expected)])
    sc = tc2.copy()
    sc.drop_duplicates(inplace=True)
    tm.assert_series_equal(sc, tc2[(~ expected)])
    expected = Series([False, True, True, False, False, False, False])
    tm.assert_series_equal(tc2.duplicated(keep='last'), expected)
    tm.assert_series_equal(tc2.drop_duplicates(keep='last'), tc2[(~ expected)])
    sc = tc2.copy()
    sc.drop_duplicates(keep='last', inplace=True)
    tm.assert_series_equal(sc, tc2[(~ expected)])
    expected = Series([False, True, True, False, True, True, False])
    tm.assert_series_equal(tc2.duplicated(keep=False), expected)
    tm.assert_series_equal(tc2.drop_duplicates(keep=False), tc2[(~ expected)])
    sc = tc2.copy()
    sc.drop_duplicates(keep=False, inplace=True)
    tm.assert_series_equal(sc, tc2[(~ expected)])